webpackJsonp([0],[,,,,,function(e,t,n){var i=n(47)("wks"),r=n(34),o=n(6).Symbol,a="function"==typeof o,s=e.exports=function(e){return i[e]||(i[e]=a&&o[e]||(a?o:r)("Symbol."+e))};s.store=i},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var i=n(14);e.exports=function(e){if(!i(e))throw TypeError(e+" is not an object!");return e}},function(e,t){var n=e.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(e,t,n){var i=n(20),r=n(46);e.exports=n(12)?function(e,t,n){return i.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},,function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){e.exports=!n(42)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){e.exports={}},function(e,t,n){var i=n(6),r=n(9),o=n(13),a=n(34)("src"),s="toString",d=Function[s],c=(""+d).split(s);n(8).inspectSource=function(e){return d.call(e)},(e.exports=function(e,t,n,s){var d="function"==typeof n;d&&(o(n,"name")||r(n,"name",t)),e[t]!==n&&(d&&(o(n,a)||r(n,a,e[t]?""+e[t]:c.join(String(t)))),e===i?e[t]=n:s?e[t]?e[t]=n:r(e,t,n):(delete e[t],r(e,t,n)))})(Function.prototype,s,function(){return"function"==typeof this&&this[a]||d.call(this)})},function(e,t,n){var i=n(27);e.exports=function(e,t,n){if(i(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,i){return e.call(t,n,i)};case 3:return function(n,i,r){return e.call(t,n,i,r)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var i=n(6),r=n(8),o=n(9),a=n(16),s=n(17),d="prototype",c=function(e,t,n){var l,u,f,p,h=e&c.F,g=e&c.G,m=e&c.S,v=e&c.P,y=e&c.B,b=g?i:m?i[t]||(i[t]={}):(i[t]||{})[d],w=g?r:r[t]||(r[t]={}),x=w[d]||(w[d]={});g&&(n=t);for(l in n)u=!h&&b&&void 0!==b[l],f=(u?b:n)[l],p=y&&u?s(f,i):v&&"function"==typeof f?s(Function.call,f):f,b&&a(b,l,f,e&c.U),w[l]!=f&&o(w,l,p),v&&x[l]!=f&&(x[l]=f)};i.core=r,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,n){var i=n(7),r=n(121),o=n(141),a=Object.defineProperty;t.f=n(12)?Object.defineProperty:function(e,t,n){if(i(e),t=o(t,!0),i(n),r)try{return a(e,t,n)}catch(s){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var i=n(32),r=Math.min;e.exports=function(e){return e>0?r(i(e),9007199254740991):0}},function(e,t,n){"use strict";function i(e){return window.googletag=window.googletag||{},window.googletag.cmd=window.googletag.cmd||[],e=d.extend({bidders:[]},e),y.registerBidder(e.bidders),window.googletag.cmd.push(function(){document.getElementById("dfp-ad-o1")&&(h.add("dfp-ad-o1",window.googletag.defineOutOfPageSlot(window.PGM.ads.adUnit,"dfp-ad-o1").addService(window.googletag.pubads())),f("defined o1 ad"),p("dfpauto","o1",{},{})),window.googletag.pubads().addEventListener("slotRenderEnded",m),window.googletag.pubads().enableSingleRequest(),window.googletag.pubads().disableInitialLoad(),window.googletag.pubads().collapseEmptyDivs(),window.googletag.enableServices()}),v("screen and (min-width: 767px) and (max-width: 1023px)"),Promise.all([l.createScriptTag("//www.googletagservices.com/tag/js/gpt.js"),l.createScriptTag("//c.amazon-adsystem.com/aax2/amzn_ads.js")])}function r(e){var t;e.find(".dfp-ad:not([id])").each(function(){try{t=JSON.parse(this.getElementsByTagName("script")[0].textContent)}catch(e){return void f("could not extract ad data from",this)}this.id=d.uniqueId("dfp-ad-"),g.define(this.id,t,this)})}function o(e){"string"==typeof e?e=[e]:Array.isArray(e)||(e=d.pluck(e.filter(".dfp-ad"),"id")),window.googletag.cmd.push(function(){return y.auction(e).then(function(){return g.refresh(e)})})}function a(e){r(e),o(e.find(".dfp-ad"))}function s(e,t){var n=x(e)(t);n.filter(".dfp-ad-o1").length&&"function"==typeof window.jpUnloadUnits&&window.jpUnloadUnits(),b(t),o(n)}var d=n(1),c=n(4),l=n(10),u=n(2),f=u("dfp"),p=u("dfpauto"),h=n(23),g=n(71),m=n(75),v=n(73),y=n(72),b=n(74),w=n(76),x=n(70);c.on("contentLoaded",r),c.on("initialContentLoaded",a),c.on("adTemplatesInserted",r),c.on("contentDisplayed",s),c.on("urlChange:post",s),c.on("ads:refresh",g.refresh),e.exports={setup:d.once(i),stickyLeaderboard:w,refresh:o}},function(e,t){"use strict";function n(e,t,n){a[e]=t,s[e]=n}function i(e){return a[e]||null}function r(e){return s[e]||[]}function o(e){var t={};return a[e].getTargetingKeys().forEach(function(n){t[n]=a[e].getTargeting(n)}),t}var a={},s={};e.exports={add:n,get:i,getSlotSizes:r,getSlotTargeting:o}},,function(e,t){"use strict";e.exports=function(e){return{id:e.data("id"),canonical:e.data("canonical"),title:e.data("page-title"),authors:e.find(".js-authors-list").text().replace(/(^\s+|\s+$)/g,""),publishDate:e.find(".js-publish-date").data("pubdate-value"),analyticsCategory:e.data("analytics-category"),analyticsTags:e.data("analytics-tags"),chartbeatSection:e.data("chartbeatSection")}}},,function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var i=n(11),r=n(5)("toStringTag"),o="Arguments"==i(function(){return arguments}()),a=function(e,t){try{return e[t]}catch(n){}};e.exports=function(e){var t,n,s;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=a(t=Object(e),r))?n:o?i(t):"Object"==(s=i(t))&&"function"==typeof t.callee?"Arguments":s}},function(e,t,n){var i=n(14),r=n(6).document,o=i(r)&&i(r.createElement);e.exports=function(e){return o?r.createElement(e):{}}},function(e,t,n){var i=n(20).f,r=n(13),o=n(5)("toStringTag");e.exports=function(e,t,n){e&&!r(e=n?e:e.prototype,o)&&i(e,o,{configurable:!0,value:t})}},function(e,t,n){var i=n(47)("keys"),r=n(34);e.exports=function(e){return i[e]||(i[e]=r(e))}},function(e,t){var n=Math.ceil,i=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?i:n)(e)}},function(e,t,n){var i=n(123),r=n(18);e.exports=function(e){return i(r(e))}},function(e,t){var n=0,i=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+i).toString(36))}},function(e,t,n){"use strict";var i=n(0),r=n(4),o=n(100),a=n(99),s=n(101),d=n(98),c=n(25);window._gaq=window._gaq||[],window.dataLayer=window.dataLayer||[],r.on("trackEvent",o.trackEvent),r.on("trackPageview",o.trackPageview),i("body").on("click","a[data-tracklabel], button[data-tracklabel], [data-tracklabel] a:not([data-tracklabel]), [data-tracklabel] button:not([data-tracklabel])",function(){var e=i(this),t=e.attr("data-tracklabel")||e.parents("[data-tracklabel]").attr("data-tracklabel")||!1,n=e.attr("data-trackaction")||e.parents("[data-trackaction]").attr("data-trackaction")||!1,o={nonInteraction:!0};!1!==t&&(o.label=t),!1!==n&&(o.action=n),r.trigger("trackEvent",o)}),window.PGM.events.on("urlChange:post",s),window.PGM.events.on("urlChange:post",a),window.PGM.events.on("urlChange:post",d),window.PGM.events.on("trackComscore",a),r.on("asyncContentLoaded",function(){r.trigger("trackEvent",{action:"Scroll",label:"New Content Loaded"})}),e.exports={setCategory:o.setCategory,setAction:o.setAction,getContentInfo:c}},function(e,t,n){"use strict";var i=n(4),r=n(90),o=n(79),a=n(78),s=n(85),d=n(89),c=n(91),l=n(92),u=n(93),f=n(94),p=n(80),h=n(81),g=n(83),m=n(84),v=n(82);r.register("standard",{}),r.register("article",c),r.register("longform",l),r.register("topicIndex",u),r.register("topicSplash",f),o.register("promo",p.Model,p.View),o.register("gallery",h.Model,h.View),o.register("image",g.Model,g.View),o.register("readmore",m.Model,m.View),o.register("hybridPlayer",v.Model,v.View),i.on("contentReady",function(){i.trigger("contentLoaded",r.attach().add(o.attach()))}),i.on("asyncContentReady",function(){var e=Array.prototype.slice.apply(arguments);i.trigger.apply(i,["contentReady"].concat(e)),i.trigger.apply(i,["asyncContentLoaded"].concat(e)),d()}),s.init(),i.on("contentLoaded",a),e.exports={types:r,embeds:o}},function(e,t,n){"use strict";var i=n(3),r={LeftRailItem:i.Model.extend({}),TopicBlock:i.Model.extend({}),Ad:i.Model.extend({}),Taboola:i.Model.extend({})};r.LeftRailItemCollection=i.Collection.extend({model:r.LeftRailItem}),r.LeftRail=i.Model.extend({initialize:function(e){this.set("options",e.options),this.set("title",e.title);var t=new r.LeftRailItemCollection(e.mainList),n=e.initialItem.id;if(t.remove(n),t.add(e.initialItem,{at:0}),this.set("mainList",t),e.topicBlock){var i=new r.TopicBlock(e.topicBlock);this.set("topicBlock",i)}else window.PGM.debug("leftRail","no topic block found")},getPathAfterId:function(e){e=parseInt(e);var t=this.get("mainList");if(0===t.length)return null;var n=!1,i=t.find(function(t){return!!n||void(n=t.get("id")===e)});return"undefined"==typeof i?null:i.get("path")}}),e.exports=r},,function(e,t){var n={utf8:{stringToBytes:function(e){return n.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(n.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t},bytesToString:function(e){for(var t=[],n=0;n<e.length;n++)t.push(String.fromCharCode(e[n]));return t.join("")}}};e.exports=n},function(e,t,n){var i=n(5)("unscopables"),r=Array.prototype;void 0==r[i]&&n(9)(r,i,{}),e.exports=function(e){r[i][e]=!0}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){e.exports=function(e){try{return!!e()}catch(t){return!0}}},function(e,t,n){e.exports=n(6).document&&document.documentElement},function(e,t,n){"use strict";var i=n(45),r=n(19),o=n(16),a=n(9),s=n(13),d=n(15),c=n(127),l=n(30),u=n(133),f=n(5)("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",g="keys",m="values",v=function(){return this};e.exports=function(e,t,n,y,b,w,x){c(n,t,y);var _,S,I,T=function(e){if(!p&&e in C)return C[e];switch(e){case g:return function(){return new n(this,e)};case m:return function(){return new n(this,e)}}return function(){return new n(this,e)}},A=t+" Iterator",k=b==m,E=!1,C=e.prototype,P=C[f]||C[h]||b&&C[b],j=P||T(b),O=b?k?T("entries"):j:void 0,R="Array"==t?C.entries||P:P;if(R&&(I=u(R.call(new e)),I!==Object.prototype&&(l(I,A,!0),i||s(I,f)||a(I,f,v))),k&&P&&P.name!==m&&(E=!0,j=function(){return P.call(this)}),i&&!x||!p&&!E&&C[f]||a(C,f,j),d[t]=j,d[A]=v,b)if(_={values:k?j:T(m),keys:w?j:T(g),entries:O},x)for(S in _)S in C||o(C,S,_[S]);else r(r.P+r.F*(p||E),t,_);return _}},function(e,t){e.exports=!1},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var i=n(6),r="__core-js_shared__",o=i[r]||(i[r]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t,n){var i,r,o,a=n(17),s=n(122),d=n(43),c=n(29),l=n(6),u=l.process,f=l.setImmediate,p=l.clearImmediate,h=l.MessageChannel,g=0,m={},v="onreadystatechange",y=function(){var e=+this;if(m.hasOwnProperty(e)){var t=m[e];delete m[e],t()}},b=function(e){y.call(e.data)};f&&p||(f=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return m[++g]=function(){s("function"==typeof e?e:Function(e),t)},i(g),g},p=function(e){delete m[e]},"process"==n(11)(u)?i=function(e){u.nextTick(a(y,e,1))}:h?(r=new h,o=r.port2,r.port1.onmessage=b,i=a(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(i=function(e){l.postMessage(e+"","*")},l.addEventListener("message",b,!1)):i=v in c("script")?function(e){d.appendChild(c("script"))[v]=function(){d.removeChild(this),y.call(e)}}:function(e){setTimeout(a(y,e,1),0)}),e.exports={set:f,clear:p}},function(e,t,n){var i=n(32),r=Math.max,o=Math.min;e.exports=function(e,t){return e=i(e),e<0?r(e+t,0):o(e,t)}},function(e,t,n){var i=n(18);e.exports=function(e){return Object(i(e))}},function(e,t,n){var i;!function(r,o,a){var s=window.matchMedia;"undefined"!=typeof e&&e.exports?e.exports=a(s):(i=function(){return o[r]=a(s)}.call(t,n,t,e),!(void 0!==i&&(e.exports=i)))}("enquire",this,function(e){"use strict";function t(e,t){var n,i=0,r=e.length;for(i;i<r&&(n=t(e[i],i),n!==!1);i++);}function n(e){return"[object Array]"===Object.prototype.toString.apply(e)}function i(e){return"function"==typeof e}function r(e){this.options=e,!e.deferSetup&&this.setup()}function o(t,n){this.query=t,this.isUnconditional=n,this.handlers=[],this.mql=e(t);var i=this;this.listener=function(e){i.mql=e,i.assess()},this.mql.addListener(this.listener)}function a(){if(!e)throw new Error("matchMedia not present, legacy browsers require a polyfill");this.queries={},this.browserIsIncapable=!e("only all").matches}return r.prototype={setup:function(){this.options.setup&&this.options.setup(),this.initialised=!0},on:function(){!this.initialised&&this.setup(),this.options.match&&this.options.match()},off:function(){this.options.unmatch&&this.options.unmatch()},destroy:function(){this.options.destroy?this.options.destroy():this.off()},equals:function(e){return this.options===e||this.options.match===e}},o.prototype={addHandler:function(e){var t=new r(e);this.handlers.push(t),this.matches()&&t.on()},removeHandler:function(e){var n=this.handlers;t(n,function(t,i){if(t.equals(e))return t.destroy(),!n.splice(i,1)})},matches:function(){return this.mql.matches||this.isUnconditional},clear:function(){t(this.handlers,function(e){e.destroy()}),this.mql.removeListener(this.listener),this.handlers.length=0},assess:function(){var e=this.matches()?"on":"off";t(this.handlers,function(t){t[e]()})}},a.prototype={register:function(e,r,a){var s=this.queries,d=a&&this.browserIsIncapable;return s[e]||(s[e]=new o(e,d)),i(r)&&(r={match:r}),n(r)||(r=[r]),t(r,function(t){s[e].addHandler(t)}),this},unregister:function(e,t){var n=this.queries[e];return n&&(t?n.removeHandler(t):(n.clear(),delete this.queries[e])),this}},new a})},,function(e,t,n){"use strict";function i(e){var t=a(".js-leftRail-container");if(1!==t.length)return void u("Could not find a leftRail to set up.");try{h=new p.Model.LeftRail(JSON.parse(t.find("script").text()))}catch(n){return void u("Error parsing script leftRail script",n,t.find("script"))}p.start(),c.on("contentLoaded",o),a(".site-footer").addClass("perma-hidden"),r(),e=e||0,d.register(window.PGM.mediaQueries.large,{match:function(){(new p.View.Layout).getRegion("leftRail").show(new p.View.LeftRail({leftRailModel:h,behavior:p.ViewModel.Behavior})),t.waypoint("sticky",{offset:e}).css("top",e).parent().css("float","left")},unmatch:function(){t.waypoint("unsticky")}})}function r(){var e=a(".js-mainWell article").first().position().top,t=a(".js-mainWell article").first().height(),n=a(".rail-item__progress").first().attr("max",t).attr("value",Math.min(0,window.pageYOffset-e));a(window).scroll(s.throttle(function(){n.attr("value",Math.min(0,window.pageYOffset-e))},100)),c.on("urlChange:post",function(i,r){e=r.position().top,t=r.height(),n=a(".rail-item__progress").first().attr("max",t).attr("value",Math.min(0,window.pageYOffset-e))})}function o(){var e=a(".js-leftRail-loadNewContent:not(.is-leftrail-autoload-processed)");return 0===e.length?void a(".site-footer").removeClass("perma-hidden"):void e.each(function(){var e=a(this);e.waypoint(function(){var t=e.data("currentid"),n=e.data("urlprefix"),i=h.getPathAfterId(t);return"undefined"==typeof t||"undefined"==typeof n?void f("currentId or urlPrefix are null",t,n):"undefined"==typeof h?void f("leftRail model is undefined, bailing."):"undefined"==typeof i||null===i?void f("leftRailModel nextPath is undefined for",t):(e.addClass("autoload-spinner"),void a.ajax({url:n+i+(document.location.search||""),success:function(t){e.replaceWith(t),window.PGM.events.trigger("asyncContentReady")}}))},{offset:"150%",triggerOnce:!0})}).addClass("is-leftrail-autoload-processed")}var a=n(0),s=n(1),d=n(51),c=n(4),l=n(2),u=l("init"),f=l("infinite"),p=n(86),h=void 0;e.exports={setup:s.once(i)}},function(e,t,n){"use strict";var i=n(0),r=n(2)("lazyload"),o=n(4),a=n(10),s=n(151);s.makeJQueryPlugin(i);var d="skip"===r.getData();d&&r("skipping lazyload");var c=function(){i("img[data-src]:not(.js-lazyload-skip)").each(function(){var e=i(this),t=e.attr("data-src");r("img",t),e.attr("src",t),e.attr("data-srcwas",t),e.attr("data-src",null)})},l=function(){i("script[data-src]").each(function(){var e=i(this),t=e.attr("data-src");r("script",t),a.createScript(t),e.attr("data-srcwas",t),e.attr("data-src",null)})},u=function(){i("[data-bgsrc]").each(function(){var e=i(this),t="url("+i(this).attr("data-bgsrc")+")";r("background image",t),e.css("background-image",t),e.attr("data-bgsrcwas",t),e.attr("data-bgsrc",null)})},f=function(e){var t=i("script.js-lazyload-noscroll");if(0!==t.length){var n=t.last().next(),r=p(n,e.offsetter);t.each(function(){var e=i(this),t=i(e.html().replace(/scriptToBe/g,"script"));e.replaceWith(t),t.imagesLoaded().progress(function(){r()})}),r()}},p=function(e,t){if(0===e.length)return i.noop;var n="undefined"!=typeof t?t.height():0;return function(){window.scrollTo(0,e.offset().top-n)}},h=d?function(){}:function(){o.on("asyncContentLoaded",function(){c(),l()})};e.exports={loadImages:d?function(){}:c,loadScripts:d?function(){}:l,loadBackgroundImages:d?function(){}:u,loadOnAsyncContentLoaded:d?function(){}:h,loadScriptTemplates:d?function(){}:f}},function(e,t,n){"use strict";n(156);var i=n(1),r=n(0),o=n(2)("floater"),a=0,s=[],d=[200,400,400,2e3],c=d.reduce(function(e,t){return e+t},0),l=function h(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:d.length,r=window.videojs&&"function"==typeof window.videojs&&window.videojs(e);"undefined"==typeof r||null!==t&&"undefined"==typeof r[t]?i>=0?setTimeout(function(){h(e,t,n,--i)},d[i]):o("no videojs object found for "+e+" after "+c+" millis"):n(r)},u=function(e,t){this.id=a++,this.options=t;var n=e.find(".video-js").attr("id"),s=0;return e.prepend('<div class="js-floater-transition"></div>'),this.createWaypoint=function(){this.waypoint=new window.Waypoint({element:e[0],handler:i.bind(function(t){if("down"===t){var n=["div.js-floater-media > video[autoplay]","div[autoplay=true].vjs-ima3-not-playing-yet:not(.vjs-ima3-paused)","div.vjs-playing","div.vjs-ad-playing:not(.vjs-ima3-paused)"],i=n.join(", ");e.find(i).length>0?this["float"]():(o("not floating due to"),n.forEach(function(e){o(e,r(e).length)}),o(e.html()))}else this.unfloat()},this),offset:function(){return-.5*this.element.clientHeight}})},this["float"]=function(){o("floating"),e.find(".js-floater-media").append('<div class="floater__close fa fa-close js-floater-close"></div>'),e.find(".js-floater-media").addClass("floating"),e.find(".js-floater-transition").addClass("active"),e.find(".js-floater-media").addClass("transitioning"),setTimeout(function(){e.find(".js-floater-media").removeClass("transitioning")},50),l(n,"mediainfo",function(e){e.width(420),e.height(240),s=Date.now(),window.PGM.events.trigger("trackEvent",{action:"sticky start",category:"video",label:[e.mediainfo.id,e.mediainfo.name].join(" - ")})})},this.unfloat=function(){o("unfloating"),e.find(".floating").length>0&&(e.find(".floater__close").remove(),e.find(".js-floater-media").removeClass("floating"),e.find(".js-floater-transition").removeClass("active"),l(n,"mediainfo",function(e){e.width("auto"),e.height("auto"),window.PGM.events.trigger("trackEvent",{action:"sticky close",category:"video",label:[e.mediainfo.id,e.mediainfo.name].join(" - "),value:Math.round((Date.now()-s)/1e3)})}))},e.on("click",".floater__close",{floater:this},function(e){l(n,"ads",function(e){if("ad-playback"===e.ads.state){var t=e.ima3&&e.ima3.adsManager;"undefined"!=typeof t?t.pause():o("video.ima3.adsManager cannot pause due to being ",e.ima3,e.ima3&&e.ima3.adsManager)}else e.pause()}),e.data.floater.unfloat()}),this},f=function(e,t){o("new floater for",e);var n=new u(e,t);return s.push(n),n},p=function(e){["wrapper","unfloatSelector"].forEach(function(t){if("undefined"==typeof e[t])throw{name:"InitializationException",message:"options."+t+" is required"}});var t=r(e.wrapper);if(!t.hasClass("is-floater-processed")){t.addClass("is-floater-processed");var n=f(t,e);n.createWaypoint()}};e.exports=p},function(e,t,n){"use strict";var i=n(0),r=n(1),o=n(3),a=n(4),s=n(22),d=void 0,c=void 0,l=o.Model.extend({defaults:{type:"",content:"",trackingLabel:"Main Image"}}),u=o.View.extend({adTemplate:window.PGM.JST["ads/slot"],tagName:"article",className:function(){return"lightbox-content lightbox-content--"+this.model.get("type")},render:function(){return this.$el.html(this.model.get("content")),this.onRender(),a.trigger("contentLoaded",this.$el),this},onRender:r.noop}),f={};f.gallery=u.extend({initialize:function(){this.counter=0,this.track({action:"Expand",label:this.model.get("trackingLabel")})},onRender:function(){this.$el.append(this.adTemplate({slot:window.PGM.ads.data.slots.lightbox})),this.slider=this.$(".js-slider").bxSlider({pager:!1,infiniteLoop:!0,slideMargin:40,nextText:"",prevText:"",onSlideBefore:r.bind(this.slideBeforeHandler,this)}),d.on("keyup."+this.cid,r.bind(this.keyupHandler,this)),r.defer(r.bind(function(){this.slider.redrawSlider()},this))},slideBeforeHandler:function(e,t,n){this.$(".js-slide-count").text(n+1),this.$(".js-slide-title").text(e.data("title")),this.$(".js-slide-description").text(e.data("description")),this.$(".js-slide-credit").text(e.data("credit")),++this.counter%3===0&&s.refresh(this.$(".dfp-ad")),this.track({action:"Item",label:"Click"})},keyupHandler:function(e){switch(e.keyCode){case 39:this.slider.goToNextSlide();break;case 37:this.slider.goToPrevSlide()}},track:function(e){a.trigger("trackEvent",r.extend({category:"Gallery"},e))},events:{"click .js-gallery-meta-toggle":"toggleMeta"},toggleMeta:function(){this.$(".js-gallery-meta").toggleClass("collapsed"),this.$(".js-gallery-meta-toggle").toggleClass("gallery-slide__meta-toggle--expand fa fa-angle-down")},remove:function(){this.slider&&this.slider.destroySlider&&this.slider.destroySlider(),this.slider=null,d.off("."+this.cid),this.track({action:"Close"}),o.View.prototype.remove.call(this)}});var p=o.View.extend({className:"lightbox lightbox--loading",events:{"click .js-lightbox-close":"remove"},render:function(){return d.on("keyup."+this.cid,r.bind(this.keyupHandler,this)),this.model&&!this.contentView&&this.loadContent(this.model),this},loadContent:function(e){var t=f[e.get("type")]||u;this.model=e,this.$el.removeClass("lightbox--loading"),this.contentView=new t({model:e}).render(),this.contentView.$el.appendTo(this.el),a.trigger("contentDisplayed","lightbox-"+e.get("type"),this.contentView.$el)},keyupHandler:function(e){27===e.keyCode&&this.remove()},remove:function(){this.contentView&&this.contentView.remove(),this.contentView=null,c=null,d.off("."+this.cid),o.View.prototype.remove.call(this)}});e.exports=function(){d=i(document),i("body").on("click","[data-lightbox-content-path]",function(){var e=this.getAttribute("data-lightbox-tracking-label"),t=this.getAttribute("data-lightbox-content-path");t.startsWith("/")||(t="/"+t),c&&c.remove(),c=new p,c.render().$el.appendTo(document.body),i.ajax({url:"/fe_data/lightbox"+t,success:function(t){c.loadContent(new l({type:"gallery",trackingLabel:e,content:t}))},error:function(){c.remove()}})})}},function(e,t,n){"use strict";var i=n(0),r=n(1),o=n(2)("video"),a=n(4),s=!0,d=function l(){return"function"!=typeof window.videojs?(o("no videojs, try again once."),void(s&&(s=!1,setTimeout(l,2e3)))):void r.each(window.videojs.getPlayers(),function(e){null!==e&&"undefined"!=typeof e&&"undefined"==typeof e.pgm&&(o("setting up new player ",e.id()),e.ready(function(){this.on(["play","ads-play"],function(){c(e)}),this.pgm={},this.paused()||c(this)}))})},c=function(e){o("stopping players besides",e.id()),r.each(window.videojs.getPlayers(),function(t){t.id()!==e.id()&&(t.pause(),t.ima3&&t.ima3.adsManager&&"function"==typeof t.ima3.adsManager.pause&&t.ima3.adsManager.pause())}),0===i(e.el()).parents(".js-floater-media.floating").length&&(window.PGM.debug("floater","closing due to other video playing"),i(".js-floater-close").trigger("click"))};a.on("asyncContentLoaded",d),i("body").on("click",".video-js",d),e.exports=d},function(e,t){"use strict";function n(){return document.documentElement.clientWidth<767?"mobile":"desktop"}function i(){return document.body.className.indexOf("homepage")!==-1?"homepage":"ros"}function r(e){return e.length>1?e.shift():e[0]}function o(e,t){return{getBid:function(o){if(o.sizes.map(function(e){return e.join("x")}).indexOf(e)===-1)return null;var a=r(t[n()][i()]);return"undefined"==typeof a?null:{bidder:"aol",params:{network:"10189.1",placement:a}}}}}var a={homepage:[],ros:[]},s={"300x250":{mobile:a,desktop:{homepage:["4326067","4326062"],ros:["4326092","4326091"]}},"300x600":{mobile:a,desktop:{homepage:["4326066","4326063"],ros:["4326098","4326100"]}},"728x90":{mobile:a,desktop:{homepage:["4326069","4326064"],ros:["4326097","4326094"]}},"970x250":{mobile:a,desktop:{homepage:["4326065"],ros:["4326096","4326099"]}},"970x90":{mobile:a,desktop:{homepage:["4326061","4326068"],ros:["4326093","4326095"]}},"300x50":{desktop:a,mobile:{homepage:["4326085","4326087"],ros:["4326116","4326114","4326117"]}},"320x50":{desktop:a,mobile:{homepage:["4326086","4326088"],ros:["4326115","4326112","4326113"]}}};e.exports=Object.keys(s).map(function(e){return o(e,s[e])})},function(e,t){"use strict";function n(){return document.documentElement.clientWidth<767?"mobile":"desktop"}function i(){return document.body.className.indexOf("homepage")!==-1?"homepage":"ros"}function r(e){return"m1"===e||"t"===e?"highViewability":"other"}function o(e){for(var t=s[n()],i=e.length,r=0;r<i;r++)if(-1!==t.indexOf(e[r]))return!0;return!1}var a={desktop:{homepage:{highViewability:"9985683",other:"9985684"},ros:{highViewability:"9985685",other:"9985686"}},mobile:{homepage:{highViewability:"9985687",other:"9985688"},ros:{highViewability:"9985689",other:"9985690"}}},s={desktop:["728x90","970x250","970x90","300x250","300x600"],mobile:["300x250","320x50","300x50"]};e.exports=[{getBid:function(e){return Array.isArray(e.targeting.pos)&&o(e.sizes.map(function(e){return e.join("x")}))?{bidder:"appnexus",params:{placementId:a[n()][i()][r(e.targeting.pos[0])]}}:null}}]},function(e,t){"use strict";function n(){switch(document.body.getAttribute("data-trackcategory")){case"Article":case"longform":return"177044";case"Photos":return"177046"}return document.body.className.indexOf("chart-page")!==-1||document.body.className.indexOf("ye-charts-page")!==-1?"177042":document.body.className.indexOf("homepage")!==-1&&"177040"}function i(e){var t={bidder:"rubicon",params:{accountId:"11872",siteId:"41400",zoneId:n()||"177038",sizes:e.sizes.map(function(e){return r[e.join("x")]}).filter(function(e){return!!e})}};return!Array.isArray(e.targeting.pos)||"m1"!==e.targeting.pos[0]&&"t"!==e.targeting.pos[0]||(t.params.zoneId="177038",t.params.position="atf"),0===t.params.sizes.length?null:t}var r={"728x90":2,"160x600":9,"300x600":10,"300x250":15,"320x50":43,"300x50":44,"970x250":57};e.exports={bidderSettings:{rubicon:{bidCpmAdjustment:function(e){return.85*e}}},getBid:i}},function(e,t,n){"use strict";var i=n(36),r=n(102),o=n(103);i.embeds.setBaseModel(r),i.types.register("yearEndChart",o),e.exports=i},function(e,t,n){"use strict";var i=n(1),r=n(0),o=n(155);n(154);var a=n(2)("vote"),s=["one","up","down"],d=r(".ye-chart__header"),c=d.data("chart-code"),l=d.data("chart-date"),u=c+"__"+l,f="",p=r.cookie("_ga");if("undefined"!=typeof p){var h=p.split(".");h.length>3&&(f=o(h[2]))}var g=function(){return new Promise(function(e,t){r.ajax("/fe_data/charts/getVotes/"+c+"/"+l,{success:function(t){r.each(t,function(e,t){try{for(var n=0;n<s.length;n++){var i=+t[s[n]];a.getData()>0&&(i+=+a.getData()),null===i?i=0:i>1e3&&i<1e6?i=Math.round(i/100)/10+"K":i>=1e6&&(i=Math.round(i/1e5)/10+"M"),r(".ye-chart__item[data-rank="+e+"] .ye-chart__vote-label--"+s[n]).text(i)}}catch(o){console.log(o)}}),e()},error:function(){a("Trouble retrieving vote count :("),t()}})})},m=function(e){"undefined"!=typeof e&&null!==e&&e.match(/^[-012,]+$/)||(e=null);var t=new Array(r(".ye-chart__item").length).fill(-1);if(null===e||"undefined"==typeof e)return t;var n=e.split(",");n=i.map(n,i.partial(parseInt,i,10));for(var o=Math.max(n.length,t.length),a=0;a<o;a++){var d=n[a];d<0||d>=s.length||(t[a]=d)}return t},v=function(e){for(var t=0;t<e.length;t++)"undefined"!=typeof e[t]&&e[t]>=0&&r(".ye-chart__item[data-rank='"+(t+1)+"'] input[value='"+s[e[t]]+"']").attr("checked",!0)},y=function(e){r("input.ye-chart__vote-input[type=radio]").change(function(){var t=r(this),n=this.value,i=+t.closest(".ye-chart__item").data("rank"),o=i-1;if(e[o]>=0){var d,p,h;!function(){d=s[e[o]],p=r(".ye-chart__item[data-rank="+i+"] .ye-chart__vote-label--"+d),h=+p.text(),h-1>=0&&p.text(h-1);var t=["/fe_data/charts/vote",f,c,l,i,d,"down"].join("/");r.ajax(t,{success:function(){a("vote decremented",t)},error:function(){a("trouble decrementing vote",t)}})}()}var g=r(".ye-chart__item[data-rank="+i+"] .ye-chart__vote-label--"+n),m=+g.text();m+1>0&&g.text(m+1),e[o]=s.indexOf(n),r.cookie(u,e.join(","));var v=["/fe_data/charts/vote",f,c,l,i,this.value,"up"].join("/");r.ajax(v,{success:function(){a("vote incremented",v)},error:function(){a("trouble incrementing vote",v)}})})},b=function(){var e=m(r.cookie(u));v(e),y(e)};e.exports={setup:b,getVotes:g}},,function(e,t,n){n(145),n(147),n(148),n(146),e.exports=n(8).Promise},function(e,t,n){n(143),e.exports=n(8).Array.fill},function(e,t,n){"use strict";var i=n(19),r=n(21),o=n(140),a="startsWith",s=""[a];i(i.P+i.F*n(119)(a),"String",{startsWith:function(e){var t=o(this,e,a),n=r(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),i=String(e);return s?s.call(t,i,n):t.slice(n,n+i.length)===i}})},,function(e,t,n){"use strict";var i=n(2)("dfp");e.exports=function(e){return function(){return{callBids:function(){try{window.amznads.getAdsCallback("3125",function(){e.bidsAvailableForadapter("amazon")})}catch(t){i("failed asking amazon if it wants the user",t)}}}}}},function(e,t,n){"use strict";function i(e){(Array.isArray(e)?e:[e]).forEach(function(e){return s.push(e)})}function r(e){return a.getSlotSizes(e)[o.find(Object.keys(a.getSlotSizes(e)).sort(function(e,t){return parseInt(t,10)-parseInt(e,10)}),function(e){return e<window.innerWidth})]}var o=n(1),a=n(23),s=[],d=function(e){return e.filter(function(e){return"dfp-ad-o1"!==e}).map(function(e){var t=r(e);return Array.isArray(t)?{code:e,sizes:t,bids:s.map(function(n){return n.getBid({sizes:t,targeting:a.getSlotTargeting(e)})}).filter(function(e){return!!e})}:{bids:[]}}).filter(function(e){return e.bids.length>0})};e.exports={registerBidder:i,createBidsArray:d}},function(e,t){"use strict";function n(e){return e.find(".dfp-ad")}function i(e){return n(e).add(".dfp-ad-o1").add(e.attr("data-refresh-ads")||"")}function r(e){return i(e).add(".dfp-ad-m1")}var o={article:r,"lightbox-gallery":n};e.exports=function(e){return o[e]||i}},function(e,t,n){"use strict";function i(e,t,n){var i,u=t.slot,f=u.sizeMapping[o.max(Object.keys(u.sizeMapping),function(e){return parseInt(e,10)})];if(o.extend(u.targetingParameters,t.extraTargeting),c){if(i=u.sizeMapping[o.find(Object.keys(u.sizeMapping).sort(function(e,t){return parseInt(t,10)-parseInt(e,10)}),function(e){return e<window.innerWidth})],null===i||"undefined"==typeof i.length||0===i.length)return;return r(n).data({"ad-width":i[0][0],"ad-height":i[0][1],"ad-slot":u.targetingParameters&&u.targetingParameters.pos&&u.targetingParameters.pos[0]||u.slotName}),void a("fakeads","defined fake ad "+e,u.slotName,i[0])}window.googletag.cmd.push(function(){var t=window.googletag.defineSlot(window.PGM.ads.adUnit,f,e).addService(window.googletag.pubads());
o.each(u.targetingParameters,function(e,n){t.setTargeting(n,e)}),u.responsive&&!function(){var e=window.googletag.sizeMapping();Object.keys(u.sizeMapping).sort(function(e,t){return parseInt(t,10)-parseInt(e,10)}).forEach(function(t){e.addSize([parseInt(t,10),0],u.sizeMapping[t])}),t.defineSizeMapping(e.build())}(),window.googletag.display(e),l.add(e,t,u.sizeMapping),s("defined "+e,t.getTargeting("pos")[0],u.sizeMapping,u.targetingParameters),d(t.getTargeting("pos")[0],u.sizeMapping,u.targetingParameters)})}var r=n(0),o=n(1),a=n(2),s=a("dfp"),d=a("dfpauto"),c=a.isEnabled("fakeads"),l=n(23),u=function(e){var t;if(a.isEnabled("dfpwhy")&&console.trace(),"undefined"!=typeof e)return"string"==typeof e&&(e=[e]),c?(t=[Math.floor(256*Math.random()),Math.floor(256*Math.random()),Math.floor(256*Math.random())],void o.each(e,function(e){a("fakeads","displaying colored box ad for",e);var n=r("#"+e);if(1!==n.length)return void s("fakeads","could not find slot",e);var i=n.data("ad-width"),o=n.data("ad-height");return"undefined"==typeof i||"undefined"==typeof o?void a("fakeads","could not find width or height",e,i,o):void n.html('<div class="fake-ad" style="background-color:rgb('+t.join(",")+");width:"+i+"px;height:"+o+'px;margin:auto"><h1 style="background:black;color:white;width:50px;margin:auto">'+n.data("ad-slot")+"</h1></div>")})):void window.googletag.cmd.push(function(){window.googletag.pubads().refresh(e.map(l.get)),s("refreshing "+e.join(", "),e.map(l.get))})};e.exports={define:i,refresh:u}},function(e,t,n){"use strict";function i(e){var t=l.createBidsArray(e).concat({code:"fakeSlotForAmazon",sizes:[[300,250]],bids:[{bidder:"amazon"}]});return d("setting up prebid for",t,"with a timeout of ",f),new Promise(function(e){c.que.push(function(){c.addAdUnits(t),c.requestBids({timeout:f,bidsBackHandler:function(){d("received bids back",c.getBidResponses()),c.setTargetingForGPTAsync();try{window.amznads.setTargetingForGPTAsync("amznslots")}catch(t){}e()}})})})}function r(){return Promise.resolve(!0)}function o(e){e&&(Array.isArray(e)||(e=[e]),l.registerBidder(e),e.forEach(function(e){a.extend(c.bidderSettings,e.bidderSettings)}))}var a=n(1),s=n(2),d=s("dfp"),c=n(152),l=n(69),u=n(68),f=s("prebid").getData()||500;c.registerBidAdapter(u(c),"amazon"),c.bidderTimeout=f,c.que.push(function(){window.performance&&"function"==typeof window.performance.mark&&window.performance.mark("ads_requested"),c.enableSendAllBids()}),e.exports={auction:s.isEnabled("fakeads")?r:i,registerBidder:o}},function(e,t,n){"use strict";function i(){return r?r=!1:(document.body.className=document.body.className.replace("full-page-ad",""),void window.googletag.cmd.push(function(){window.googletag.pubads().refresh()}))}var r,o=n(51);e.exports=function(e){"string"==typeof e&&(r=window.matchMedia(e).matches,o.register(e,{match:i,unmatch:i}))}},function(e,t,n){"use strict";function i(e){window.googletag.cmd.push(function(){var t=e.find(".js-ad-pageTargeting script");if(!t.length)return void a("Cannot retartget page; no tracking script found in ",e);try{r.each(JSON.parse(t.text()),function(e,t){window.googletag.pubads().setTargeting(t,e),o("dfpauto","PAGE",t,e)})}catch(n){a("Error parsing page targeting script data.",t,n)}})}var r=n(1),o=n(2),a=o("dfp");e.exports=i},function(e,t,n){"use strict";var i=n(4),r=n(2)("dfp");e.exports=function(e){var t=document.getElementById(e.slot.getSlotElementId()),n=void 0;t&&("dfp-ad-o1"===t.id&&(e.isEmpty?document.body.className=document.body.className.replace(" full-page-ad",""):-1===document.body.className.indexOf("full-page-ad")&&(document.body.className+=" full-page-ad")),-1===t.className.indexOf("is-dfp-returned")&&(t.className+=" is-dfp-returned"),n=t.getAttribute("data-prepend"),n&&t.setAttribute("data-visibleprepend",n)),e.isEmpty&&r("dfp","Ad unit "+t.id+" is empty."),i.trigger("ads:slotRenderEnded",{el:t,slot:e.slot})}},function(e,t,n){"use strict";function i(e){function t(){u.waypoint(function(e){if(!c){if(d("sticky leaderboard is "+("down"===e?"":"un")+"sticking"),"down"===e)return d("sticky leaderboard is sticking"),u.css("height",l.outerHeight(!0)),void l.addClass(h).css("top",a.offset()+"px");l.removeClass(h).css("top","auto"),u.css("height","auto")}},{offset:a.offset}),f.waypoint(function(){c||(d("sticky leaderboard moving out of the way of "+a.avoidCollision),m())},{offset:function(){var e=l.outerHeight(!0)+a.offset();return isNaN(e)?0:e}}),setTimeout(function(){r.waypoints("refresh")},2500)}function n(e){e.slot.getTargeting("pos").indexOf(a.position)!==-1&&(d("leaderboard (pos: "+a.position+") is visible at "+Date.now()),setTimeout(function(){d("leaderboard (pos: "+a.position+") has been visible for at least "+a.stickyTime+"ms"),m()},a.stickyTime))}function i(e){e.slot.getTargeting("pos").indexOf(a.position)!==-1&&(e.size[1]>=a.min&&e.size[1]<=a.max?(d("leaderboard (pos: "+a.position+") should be sticky"),t(),window.googletag.pubads().addEventListener("impressionViewable",n)):d("leaderboard should not be sticky (pos: "+a.position+", size: "+e.size.join("x")+")"))}var a=r.extend({position:"t",className:"leaderboard--top",stickyTime:5e3,avoidCollision:!1,min:10,max:100,offset:function(){return 0}},e);s.getData("stickyt")&&(a.stickyTime=1e3*s.getData("stickyt")),"function"!=typeof a.offset&&(a.offset=function(e){return function(){return e}}(parseInt(a.offset,10)));var c=!1,l=r((0===a.className.indexOf(".")?"":".")+a.className),u=l.wrap("<div>").parent(),f="string"==typeof a.avoidCollision?r((0===a.avoidCollision.indexOf(".")?"":".")+a.avoidCollision):r(),p=a.className.replace(/^\./,"").split("--")[0],h=p+"--is-sticky",g=p+"--is-sliding-up",m=o.once(function(){d("removing sticky leaderboard"),c=!0,l.addClass(g),setTimeout(function(){l.removeClass(h).removeClass(g),u.css("height","auto"),d("sticky leaderboard removed")},500)});window.googletag.cmd.push(function(){window.googletag.pubads().addEventListener("slotRenderEnded",i)})}var r=n(0),o=n(1),a=n(96),s=n(2),d=s("dfp");e.exports=a.touch?r.noop:i},function(e,t,n){"use strict";var i=n(3);e.exports=i.View.extend({render:function(){return this.onRender(),this},onRender:function(){}})},function(e,t,n){"use strict";function i(){var e=r(".autoload-direct-render");return 0===e.length?void(r(".js-autoloadStop").length&&r(".site-footer").removeClass("perma-hidden")):(s(),void e.filter(":not(.processed-by-autoloader)").each(function(){var e=r(this),t=this.getAttribute("data-url-prefix")||"",n=this.getAttribute("data-url"),i=document.location.search||"";"undefined"!=typeof n&&e.waypoint({handler:function(){e.addClass("autoload-spinner"),r.ajax({url:t+n+i,success:function(t){e.replaceWith(t),a.trigger("asyncContentReady")}})},offset:"150%",triggerOnce:!0})}).addClass("processed-by-autoloader"))}var r=n(0),o=n(1),a=n(4),s=o.once(function(){r(".site-footer").addClass("perma-hidden").waypoint("destroy"),r.waypoints("refresh")});e.exports=i},function(e,t,n){"use strict";var i=n(0),r=n(3),o=n(2)("init"),a=r.Model.extend({fetch:function(){this.trigger("change")},slashify:function(e){return e=e||"",e.startsWith("http")?e:(e.startsWith("/")?"":"/")+e},makeImageSrc:function(e){return e=this.slashify(e),e.startsWith("http")?e:window.THR&&window.THR.config&&window.THR.config.getMediaHost?window.THR.config.getMediaHost(e):window.BB&&window.BB.config&&window.BB.config.mediaHost?window.BB.config.mediaHost+e:e},makeImagecacheSrc:function(e){return this.makeImageSrc(e.path)}}),s=r.View.extend({initialize:function(){this.listenTo(this.model,"change",this.render)},template:function(){return""},serializeData:function(){return this.model.toJSON()},render:function(){return this.$el.html(this.template(this.serializeData())),this.onRender(),this},onRender:function(){}}),d={};e.exports={setBaseView:function(e){s=e},getBaseView:function(){return s},setBaseModel:function(e){a=e},getBaseModel:function(){return a},register:function(e,t,n){d[e]={modelData:t||{},viewData:n||{}}},attach:function(){var e=i();return i(".embedded-content[data-template]:not(.is-embed-initialized)").each(function(){var t,n,r,c,l,u=this.getAttribute("data-template");if(u&&d[u]){try{t=JSON.parse(i(this).find('script[type="application/json"]').html())}catch(f){return void o("Could not find embed data in",this)}n="function"==typeof d[u].modelData.extend?d[u].modelData:a.extend(d[u].modelData),c="function"==typeof d[u].viewData.extend?d[u].viewData:s.extend(d[u].viewData),r=new n(t,{parse:!0}),l=new c({model:r,el:this}),l.$el.addClass("embedded-content--"+u),i.data(this,"embedModel",r),i.data(this,"embedView",l),r.fetch(),e=e.add(l.$el),o("Initializing Embed",u,"on",this)}else o("Could Not Initialize Embed",u,"on",this)}).addClass("is-embed-initialized"),e}}},function(e,t,n){"use strict";var i=n(0),r=n(1),o=i(window);e.exports={Model:{parse:function(e){var t=this;return i.each(e.items,function(n){e.items[n].path=window.PGM.config.contentHost+t.slashify(e.items[n].path),e.items[n].image&&(e.items[n].media=e.items[n].image,delete e.items[n].image),e.items[n].media.image&&(e.items[n].media=e.items[n].media.image),e.items[n].media&&e.items[n].media.path?e.items[n].media.path=t.makeImageSrc(e.items[n].media.path):e.items[n].media&&e.items[n].media.crop&&(e.items[n].media.path=e.items[n].media.crop["768x433"])}),e}},View:{initialize:function(){this.listenTo(this.model,"change",this.render),o.on("resize",r.debounce(r.bind(this.render,this),150))},template:window.PGM.JST["longform/promo"],onRender:function(){var e=1===this.model.get("items").length;this.$el.addClass("longform-rail-promo longform-rail-promo--"+(e?"single":"multiple"))}}}},function(e,t){"use strict";e.exports={Model:{parse:function(e){return e.image&&(e.media=e.image,delete e.image),e.path=e["relative-path"]||e.relative_path,e.media.src=this.makeImageSrc(e.media.path),e}},View:{template:window.PGM.JST["embeds/gallery"]}}},function(e,t,n){"use strict";function i(e){var t=h;switch(e.get("type")){case"youtube":t=g;break;case"brightcove":t=m}return new t({model:e})}var r=n(0),o=n(1),a=n(3),s=n(4),d=n(2),c=d("hybridPlayer"),l=n(10),u=o.once(function(){return new Promise(function(e){window.onYouTubeIframeAPIReady=e,l.createScriptTag("https://www.youtube.com/iframe_api")})}),f=a.Model.extend(),p={toJSON:function(){var e=a.Model.prototype.toJSON.call(this);return e.items=this.get("items").toJSON(),e},parse:function(e){return o.extend(e,{items:new a.Collection(e.items,{model:function(t,n){return"brightcove"===t.type&&o.extend(t,{accountId:e.accountId,playerId:e.playerId}),new f(t,n)}}),currentIndex:0})},setIndex:function(e){if(e<0||e>=this.get("items").size())throw{name:"Invalid Index",message:"You tried to set a bad video index"};this.set("currentIndex",e)},getCurrentVideo:function(){return this.get("items").at(this.get("currentIndex"))}},h=a.View.extend({initialize:function(){this.listenTo(s,"hybridPlayer:videoStart",this.stop),this.template=this.getTemplate(),this.onInitialize()},onInitialize:o.noop,getTemplate:function(){return window.PGM.JST["hybrid_player/player"]},events:{"click .hybrid-player-video__container":"play"},className:function(){return"hybrid-player-video hybrid-player-video--"+this.model.get("type")},render:function(){return this.$el.html(this.template(this.model.toJSON())),this},play:function(){this.$el.is(".is-video-playing")||(s.trigger("hybridPlayer:videoStart"),this.$el.addClass("is-video-playing"),this.trackPlayEvent(),this.instantiatePlayer())},trackPlayEvent:function(){s.trigger("trackEvent",{category:"Video - UserInitiated - BB Watch",action:"Play",label:[this.model.get("title"),this.model.get("id")].join(" - ")})},stop:function(){this.$el.is(".is-video-playing")&&(this.destroyPlayerInstance(),this.$(".hybrid-player-video__container").empty(),this.$el.removeClass("is-video-playing"))},instantiatePlayer:function(){c("Called instantiatePlayer on the base class.")},destroyPlayerInstance:function(){c("Called destroyPlayerInstance on the base class.")},remove:function(){this.stop(),a.View.prototype.remove.call(this)}}),g=h.extend({getTemplate:function(){return window.PGM.JST["hybrid_player/player-youtube"]},onInitialize:function(){o.bindAll(this,"onPlayerStateChange","play","trackPlayEvent","createYouTubeApiPlayer"),this.trackPlayEvent=o.once(this.trackPlayEvent),this.play=o.after(1,this.play)},events:{},render:function(){return h.prototype.render.call(this),this.$(".hybrid-player-video__player-instance").append('<div id="'+this.cid+'"></div>'),this.instantiatePlayer(),this},play:function(){this.$el.is(".is-video-playing")||(s.trigger("hybridPlayer:videoStart",this.cid),this.$el.addClass("is-video-playing"),this.trackPlayEvent())},stop:function(e){e!==this.cid&&this.player.pauseVideo(),this.$el.removeClass("is-video-playing")},onPlayerStateChange:function(e){e.data!==window.YT.PlayerState.ENDED&&e.data!==window.YT.PlayerState.PAUSED||this.stop(),e.data===window.YT.PlayerState.PLAYING&&this.play()},instantiatePlayer:function(){u().then(this.createYouTubeApiPlayer)},createYouTubeApiPlayer:function(){var e=this.$(".hybrid-player-video__container");this.player=new window.YT.Player(this.cid,{height:e.outerHeight(),width:e.outerWidth(),videoId:this.model.get("videoId"),playerVars:{color:"white",autohide:1,modestbranding:1,showinfo:0,rel:0},events:{onStateChange:o.bind(this.onPlayerStateChange,this)}})},destroyPlayerInstance:function(){this.player&&this.player.destroy()},remove:function(){this.destroyPlayerInstance(),a.View.prototype.remove.call(this)}}),m=h.extend({instantiatePlayer:function(){var e=this.$(".hybrid-player-video__container"),t=document.createElement("script");t.src="//players.brightcove.net/"+this.model.get("accountId")+"/"+this.model.get("playerId")+"_default/index.min.js",t.onload=o.bind(this.getPlayerObject,this),r("<video>").attr({"class":"video-js",id:"video-js-"+this.model.get("videoId"),"data-video-id":this.model.get("videoId"),"data-account":this.model.get("accountId"),"data-player":d.getData("player")||this.model.get("playerId"),"data-embed":"default",width:e.outerWidth(),height:e.outerHeight(),autoplay:"true",controls:"controls"}).wrap('<div class="hybrid-player-video__player-instance"></div>').parent().append(t).appendTo(e)},getPlayerObject:function(){this.player=window.videojs("video-js-"+this.model.get("videoId"))},destroyPlayerInstance:function(){this.player&&this.player.remove()}}),v=a.View.extend({initialize:function(){this.listenTo(this.model,"change:currentIndex",this.setCurrentVideo),o.bindAll(this,"setupPlaylistScrollBehavior","calculateNavButtonStates"),this.template=window.PGM.JST["hybrid_player/playlist"]},tagName:"nav",className:"hybrid-player-playlist",events:{"click .hybrid-player-playlist__item":"selectNewVideo"},deferredEvents:{"click .hybrid-player-playlist__nav":"scrollPlaylist"},render:function(){return this.$el.html(this.template(this.model.toJSON())),this.setCurrentVideo(),o.defer(this.setupPlaylistScrollBehavior),this},selectNewVideo:function(e){var t=this.$(".hybrid-player-playlist__item").index(e.currentTarget);t!==this.model.get("currentIndex")&&this.model.set("currentIndex",t)},setCurrentVideo:function(){this.$(".hybrid-player-playlist__item").removeClass("is-current-video").eq(this.model.get("currentIndex")).addClass("is-current-video")},setupPlaylistScrollBehavior:function(){var e=0;this.$(".hybrid-player-playlist__item").each(function(){e+=r(this).outerWidth(!0)}),this.$(".hybrid-player-playlist__items").width(e),this.itemsWidth=e,this.$prev=this.$(".hybrid-player-playlist__nav--previous"),this.$next=this.$(".hybrid-player-playlist__nav--next"),this.$container=this.$(".hybrid-player-playlist__container"),this.delegateEvents(o.extend(this.events,this.deferredEvents)),this.$container.on("scroll",o.debounce(this.calculateNavButtonStates,100))},scrollPlaylist:function(e){var t=-1!==e.currentTarget.className.search(/next/);this.$container.scrollLeft(this.$container.scrollLeft()+(t?245:-245)),this.calculateNavButtonStates()},calculateNavButtonStates:function(){var e=this.$container.scrollLeft();0===e?this.$prev.attr("disabled",!0):this.$prev.removeAttr("disabled"),e>=this.itemsWidth-this.$container.width()?this.$next.attr("disabled",!0):this.$next.removeAttr("disabled")}}),y=a.View.extend({initialize:function(){this.model.get("items").size()>1&&(this.playlist=new v({model:this.model})),this.listenToOnce(this.model,"change",this.render),this.listenTo(this.model,"change:currentIndex",this.insertPlayerAndAutoplay),this.template=window.PGM.JST["hybrid_player/mainView"],this.adTemplate=window.PGM.JST["ads/slot"]},render:function(){this.$el.html(this.template(this.model.toJSON()));var e=window.PGM.ads.data.slots[this.model.get("adSlot")];return e&&r(this.adTemplate({slot:e,prepend:"Presented by:"})).appendTo(this.$(".hybrid-player__header")),this.insertPlayer(),this.playlist&&this.playlist.render().$el.appendTo(this.$el),this},insertPlayer:function(){this.player&&this.player.remove(),this.player=i(this.model.getCurrentVideo()),this.player.$el.insertAfter(this.$(".hybrid-player__header")),this.player.render()},insertPlayerAndAutoplay:function(){this.insertPlayer(),this.player.play()},remove:function(){this.player&&this.player.remove(),this.playlist&&this.playlist.remove(),a.View.prototype.remove.call(this)}});e.exports={Model:p,View:y}},function(e,t){"use strict";e.exports={Model:{parse:function(e){return e.path=this.makeImageSrc(e.path),e}},View:{template:window.PGM.JST["embeds/image"]}}},function(e,t){"use strict";var n={gallery:"See",video:"Watch","default":"Read"};e.exports={Model:{parse:function(e){return e.verb=n[e.type]||n["default"],e.image&&(e.media=e.image,delete e.image),e.media&&(e.media.image&&(e.media=e.media.image),e.media.url=this.makeImagecacheSrc(e.media)),e}},View:{template:window.PGM.JST["embeds/readmore"]}}},function(e,t,n){"use strict";function i(e){if("undefined"!=typeof this.href){e.preventDefault(),o("html, body").stop(!0).animate({scrollTop:0},"slow");var t=this.href.replace(/^http:\/\/[^\/]*/,"");o.ajax({url:"/fe_data"+t,success:function(e){var n=a.uniqueId("alterResponse:");s.on(n,function(t){e=t}),s.trigger("loadInPageResponseReceived",{uid:n,href:t,contentType:u,response:e}),s.off(n),s.trigger("asyncContentUnloaded",u,l),l.html(e),s.trigger("asyncContentReady",u,e);var i=l.find(".js-mainContent");0!==i.length&&c.changeUrl(t,u,i,"down",{replace:!0})}})}}function r(){return l=o(".js-pageContent"),0===l.length?void d("Not setting up in-page loading: no `.js-pageContent` element present."):(u=l.attr("data-content-type"),"undefined"==typeof u?void d("Aborting in-page loading setup. No content type present."):(d("Setting up in-page loading for "+u+" on",l),void o("body").on("click",".js-loadInPage",i)))}var o=n(0),a=n(1),s=n(4),d=n(2)("init"),c=n(95),l=void 0,u=void 0;e.exports={init:r}},function(e,t,n){"use strict";var i=n(26),r=new i.Application;r.Model=n(37),r.View=n(88),r.ViewModel={Behavior:n(87)(r)},e.exports=r},function(e,t,n){"use strict";var i=n(0),r=n(1),o=n(3),a=n(4),s=n(2)("leftRail");e.exports=function(e){return o.Collection.extend({initialize:function(e,t){this.leftRailModel=t.leftRailModel,this.listenTo(this.leftRailModel.get("mainList"),"update",this.refresh),this.activeIndex=1,this.leftRailModel.get("options")&&this.leftRailModel.get("options").showActiveItem&&(this.activeIndex=0),this.maxIndex=this.activeIndex,this.currentAd=null,this.adDiv=i(".js-leftRail-slot-m1"),s("first adDiv is",this.adDiv),this.lastAdDiv=null,this.taboola=this.generateRailTaboola(),this.refresh(),this.lastAdDiv=this.adDiv,a.on("urlChange:pre",r.bind(function(e,t){var n,i=t.data("id"),r=this.leftRailModel.get("mainList").get(i);if(r){var o=1;this.leftRailModel.get("options")&&this.leftRailModel.get("options").showActiveItem&&(o=0),n=this.leftRailModel.get("mainList").indexOf(r)+o}else s("not changing active index, could not find id",t,i),n=0;this.activeIndex=n,this.maxIndex=Math.max(this.maxIndex,this.activeIndex),this.adDiv=t.find(".js-leftRail-slot-m1"),s("next adDiv is",this.adDiv),this.refresh(),this.lastAdDiv=this.adDiv},this))},refresh:function(){var e=this.leftRailModel.get("mainList"),t=this.leftRailModel.get("topicBlock"),n=this.activeIndex;this.leftRailModel.get("options")&&this.leftRailModel.get("options").leftRailHighwater&&(n=this.maxIndex),s("refreshing to index ",n);var i=n+1,r=e.slice(n,i),o=this.generateRailAd();null!==o&&(r=r.concat(o)),null!==this.taboola&&(r=r.concat(this.taboola)),n=i,i=n+2,r=r.concat(e.slice(n,i)),t&&(r=r.concat(t)),n=i;var a=e.slice(n);r=r.concat(a),s("setting models"),this.set(r)},generateRailAd:function(){if(this.adDiv===this.lastAdDiv&&null!==this.currentAd)return this.currentAd;var t=this.adDiv.find("script");if(1===t.length)try{var n=JSON.parse(t.text());return this.currentAd=new e.Model.Ad({slot:n,extraClass:"is-dfp-deferred"}),this.currentAd}catch(i){s("Error parsing left rail ad data.",this.adDiv,i)}else s("no ad data found.",this.adDiv);return null},generateRailTaboola:function(){return this.taboola=new e.Model.Taboola,this.taboola}})}},function(e,t,n){"use strict";var i=n(0),r=n(26),o=n(4),a=n(37),s=n(2),d={};d.LeftRailItem=r.ItemView.extend({tagName:"article",className:"rail-item",template:window.PGM.JST["left_rail/rail_item"],attributes:function(){return{"data-id":this.model.get("id")}}}),d.TopicBlock=r.ItemView.extend({tagName:"div",className:"rail-topic-block",template:window.PGM.JST["left_rail/topic_block"]}),d.Ad=r.ItemView.extend({className:"rail-ad",template:window.PGM.JST["ads/slot"],onShow:function(){o.trigger("adTemplatesInserted",this.$el)}}),d.Taboola=r.ItemView.extend({initialize:function(){this.model.set("breadcrumb","")},template:function(){return""},className:"taboola-left-rail-wrapper",onShow:function(){var e=i(".article__content-well.is-active").data("url-breadcrumb");if(!e||e===this.model.get("breadcrumb"))return void s("taboola","not refreshing",e,this.model.get("breadcrumb"));s("taboola","refreshing",e,this.model.get("breadcrumb")),this.model.set("breadcrumb",e);var t=[window.document.location.protocol,window.PGM.config.contentHost,this.model.get("breadcrumb")].join("");this.$el.empty(),window.PGM.taboola.createWidget(this.el,{mode:"thumbnails-rr",container:"taboola-left-rail-thumbnails",placement:"Left Rail Thumbnails"},t)}}),d.LeftRail=r.CompositeView.extend({initialize:function(e){this.model=e.leftRailModel,this.collection=new e.behavior(null,e)},childView:d.LeftRailItem,template:window.PGM.JST["left_rail/left_rail"],childViewContainer:".js-rail-items",getChildView:function(e){return e instanceof a.Ad?d.Ad:e instanceof a.Taboola?d.Taboola:e instanceof a.TopicBlock?d.TopicBlock:e instanceof a.LeftRailItem?d.LeftRailItem:void s("leftRail","unknown child view for ",e)}}),d.Layout=r.LayoutView.extend({el:".article-page",regions:{leftRail:".js-leftRail"}}),e.exports=d},function(e,t,n){"use strict";var i=n(2)("3p");e.exports=function(){window.instgrm&&window.instgrm.Embeds&&"function"==typeof window.instgrm.Embeds.process?(i("refreshing instagram"),window.instgrm.Embeds.process()):i("not refreshing instagram"),window.FB&&window.FB.XFBML&&"function"==typeof window.FB.XFBML.parse?(i("refreshing facebook"),window.FB.XFBML.parse()):i("not refreshing facebook")}},function(e,t,n){"use strict";var i=n(0),r=n(2)("init"),o=n(77),a={};e.exports={setBaseView:function(e){o=e},getBaseView:function(){return o},register:function(e,t){a[e]="function"==typeof t.extend?t:o.extend(t)},attach:function(){var e=i();return i("[data-content-type]:not(.autoload-direct-render):not(.is-content-initialized)").each(function(){var t,n=this.getAttribute("data-content-type");n&&a[n]?(t=new a[n]({el:this}),i.data(this,"contentView",t.render()),e=e.add(t.$el),r("Initializing Content Type",n,"on",this)):r("Could Not Initialize Content Type",n,"on",this)}).addClass("is-content-initialized"),e}}},function(e,t,n){"use strict";var i=n(0),r=n(1),o=n(4),a=n(2),s=a("list"),d=n(22);e.exports={initialize:function(){this.setupListItemRefresh=r.once(this.setupListItemRefresh)},onRender:function(){try{var e=JSON.parse(i(".js-leftRail-container").children("script").text()).options;this.setupListItemRefresh(this.$el,e),this.insertTaboola(this.$el,e)}catch(t){a("init","Failed to parse data for left rail options.",i(".js-leftRail-container").children("script"))}},setupListItemRefresh:function(e,t){!e.hasClass("is-list-item-refresh-processed")&&t.listPageviewInterval&&i.isNumeric(t.listPageviewInterval)&&e.addClass("is-list-item-refresh-processed").find(".js-revarticle-listItem").each(function(e,n){if(0!==e){var r=i(n);r.waypoint({handler:function(){e%t.listPageviewInterval===0&&(s("triggering pageview for list item",e),o.trigger("trackPageview",{fireGTM:"on"})),e%t.listComscoreInterval===0&&(s("triggering comscore for",e),o.trigger("trackComscore",n,r)),e%t.listItemRailAdInterval===0&&(s("triggering left rail refresh for",e),d.refresh(i(".dfp-ad-m1")))},offset:"50%"})}})},insertTaboola:function(e,t){var n=e.find(".taboola-wrapper");e.data("url-breadcrumb")&&n.is(":empty")&&window.PGM.taboola.createWidget(n.get(0),{mode:t.contentWellTaboolaMode,container:"taboola-below-article-thumbnails",placement:"Below Article Thumbnails"},document.location.protocol+window.PGM.config.contentHost+e.data("url-breadcrumb"))}}},function(e,t,n){"use strict";var i=n(0),r=n(1),o=n(3),a=o.View.extend({tagName:"aside",className:"longform__body-supplementary",insertAd:function(){this.$el.append(window.PGM.JST["ads/slot"]({slot:window.PGM.ads.data.slots.m}))}});e.exports={initialize:function(){var e=i(".longform__body-primary").children("p");window.PGM.Header.initializeScrollTracking(this.$el),e.eq(Math.floor(e.length/2)).after(window.PGM.JST["ads/slot"]({slot:window.PGM.ads.data.slots.longform_t2})),this.$bodyElements=i(".longform__body-primary").children().clone()},onRender:function(){this.layoutArticle()},layoutArticle:function(){this.$(".longform__body .container:not(:first-of-type)").remove();var e=this.$(".longform__body .container"),t=e.find(".longform__body-primary").empty(),n=function(e){return-1!==e.className.indexOf("dfp-ad-longform_t2")},o=function(e){return-1!==e.className.indexOf("embedded-content")&&"promo"===e.getAttribute("data-template")},s=function(n){var o=r.extend({insertAd:!1},n),s=new a;t=i("<div>").addClass("longform__body-primary"),e=i("<div>").addClass("container").insertAfter(e).append(s.render().$el).append(t),o.insertAd&&s.insertAd()},d=r.bind(function(){var e;try{e=JSON.parse(this.$("#feature_promos").text())}catch(t){return!1}return e&&e[0]},this),c=function(t){i("<div>").attr({"class":"embedded-content","data-template":"promo"}).append(i('<script type="application/json">').text(JSON.stringify(t))).prependTo(e.find(".longform__body-supplementary"))};this.$bodyElements.each(function(){var i;n(this)?(i=d(),s({insertAd:!!i}),i&&c(i),e.before(this)):o(this)?(s({insertAd:!0}),e.find(".longform__body-supplementary").prepend(this)):t.append(this)}),this.$(".longform__body p").each(function(){""===this.innerHTML.trim()&&this.parentNode.removeChild(this)}),window.enquire.register(window.PGM.mediaQueries.large,{match:function(){i(".dfp-ad-m, .dfp-ad-m1").railSlider({headerOffset:i("#site-header").height()+8})},unmatch:function(){i(".dfp-ad-m, .dfp-ad-m1").each(function(){i.railSliders.disable()})}}),r.defer(function(){i.railSliders.recalculate()})}}},function(e,t,n){"use strict";var i=n(0),r=n(1),o=n(3),a=n(2)("topic"),s="/fe_data/topic_blocks/",d=r.debounce(function(){i.railSliders&&i.railSliders.recalculate()},200),c=o.Model.extend({}),l=o.Model.extend({initialize:function(){var e=this.get("type");"multiple"!==e&&(this.pageLength="video"===e||"gallery"===e?2:3,this.on("change:currentIndex",this.setCurrentPage),this.set("totalPages",Math.ceil(this.get("items").length/this.pageLength)),this.set("currentIndex",0))},setCurrentPage:function(){var e=this.get("currentIndex");this.set("currentPageItems",this.get("items").slice(this.pageLength*e,this.pageLength*e+this.pageLength)),this.set("currentPage",e+1)},nextPage:function(){var e=this.get("currentIndex")+1;this.set("currentIndex",e<this.get("totalPages")?e:0)},prevPage:function(){var e=this.get("currentIndex")-1;this.set("currentIndex",e<0?this.get("totalPages")-1:e)}}),u=o.Collection.extend({initialize:function(){this.currentIndex=0},model:l,getCurrentIndex:function(){return this.currentIndex},next:function(){return a("topic","rendering "+this.currentIndex+" of "+this.length),this.at(this.currentIndex++%this.length)},reset:function(e){this.currentIndex=e||0}}),f=o.View.extend({tagName:"aside",className:function(){return["capsule","capsule--"+this.model.get("type"),"capsule--"+("pushdown"===this.model.get("type")?"horizontal":"vertical")].join(" ")},initialize:function(){var e=this.model.get("type");"video"===e||"gallery"===e?e="media":"list_index"!==e&&"review"!==e||(e="list"),this.template=window.PGM.JST["topic_index/capsule-"+e],this.listenTo(this.model,"change:currentPage",this.render)},events:{"click .capsule__nav-button--next":"nextPage","click .capsule__nav-button--prev":"prevPage"},render:function(){return this.$el.html(this.template(this.model.toJSON())),d(),this},nextPage:function(){this.model.nextPage()},prevPage:function(){this.model.prevPage()}}),p=o.View.extend({tagName:"aside",className:function(){var e="pushdown"===this.model.get("type")?"horizontal":"vertical";return["capsule","capsule--swipe","capsule--swipe-"+e,"capsule--"+e].join(" ")},initialize:function(){var e=this.model.get("type"),t="";"chart"!==e&&"pushdown"!==e||(t="-"+e),this.template=window.PGM.JST["topic_index/capsule-swipe"+t]},render:function(){return this.$el.html(this.template(this.model.toJSON())),this}}),h=r.once(function(){return new u}),g=r.once(function(){return new c}),m=function(e,t,n){i.ajax({url:s+e,success:function(e){"undefined"!=typeof e.pushdownPromo&&null!==e.pushdownPromo&&t.set(e.pushdownPromo),n.set(e.blocks)},error:function(){a("topic","could not fetch topic blocks")}})};e.exports=o.View.extend({initialize:function(){this.blockViews=[],this.pushdownPromo=g(),this.blocksCollection=h(),m(this.$el.data("topicslug"),this.pushdownPromo,this.blocksCollection),this.collectionResetTarget=this.blocksCollection.getCurrentIndex(),this.resizeSlidersForAds(),i(window).on("resize",r.debounce(r.bind(this.render,this),150))},resizeSlidersForAds:function(){var e=this;window.googletag=window.googletag||{},window.googletag.cmd=window.googletag.cmd||[],window.googletag.cmd.push(function(){window.googletag.pubads().addEventListener("slotRenderEnded",r.bind(e.handleSlotRenderEnded,e))})},events:r.extend({"click .topic-index__summary-toggle":"toggleSummary","click .topic-share__toggle":"toggleShare"},window.PGM.touch?{"touchend .topic-card__featured-flag":"toggleFeaturedFlagIndicator"}:{"mouseenter .topic-card__featured-flag":"toggleFeaturedFlagIndicator","mouseleave .topic-card__featured-flag":"toggleFeaturedFlagIndicator"}),isDesktop:function(){return document.documentElement.clientWidth>=1024},render:function(){return this.$rail=this.$rail||this.$(".js-leftRail"),this.$well=this.$well||this.$(".js-mainWell"),this.removeBlockViews(),this.isDesktop()&&this.insertLeftRailAds(),this.blocksCollection.length?this.insertBlockViews():this.listenTo(this.blocksCollection,"add",this.render),this},toggleFeaturedFlagIndicator:function(e){/is-expanded/.test(e.currentTarget.className)?e.currentTarget.className=e.currentTarget.className.replace(" is-expanded",""):e.currentTarget.className+=" is-expanded"},toggleSummary:function(){this.$(".topic-index__summary").toggleClass("is-closed"),r.defer(d)},toggleShare:function(e){/is-expanded/.test(e.target.parentNode.className)?e.target.parentNode.className=e.target.parentNode.className.replace(" is-expanded",""):e.target.parentNode.className+=" is-expanded"},insertLeftRailAds:function(){for(var e=['<div class="topic-index__slide-container">',window.PGM.JST["ads/slot"]({slot:window.PGM.ads.data.slots.rail}),"</div>"].join("");this.$rail.find(".topic-index__slide-container").length<3;)this.$rail.append(e);this.$rail.find(".dfp-ad").railSlider({
context:".topic-index__slide-container",headerOffset:function(){return i("#site-header").outerHeight(!0)+24}})},insertBlockViews:function(){var e=this.isDesktop()?this.$rail.find(".topic-index__slide-container"):this.$well.find(".dfp-ad"),t=this.isDesktop()?f:p;e.each(r.bind(function(e,n){var i=new t({model:this.blocksCollection.next()});this.blockViews.push(i.render()),i.$el.insertAfter(n)},this)),this.pushdownPromo.has("title")&&this.$(".js-pushdownPromo").append(new t({model:this.pushdownPromo}).render().$el)},removeBlockViews:function(){r.each(this.blockViews,function(e){e.remove()}),this.$(".js-pushdownPromo").empty(),this.blockViews=[],this.blocksCollection.reset(this.collectionResetTarget)},handleSlotRenderEnded:function(e){if(!e.isEmpty&&this.isDesktop()){var t=document.getElementById(e.slot.getSlotElementId());/(dfp-ad-(rail|m1))/.test(t.className)&&(t.parentNode.style.minHeight=parseInt(e.size[1],10)+1e3+"px",d())}}})},function(e,t,n){"use strict";var i=n(0),r=n(1),o=n(3);e.exports=o.View.extend({initialize:function(){r.bindAll(this,"render"),i(window).on("resize."+this.cid,r.debounce(this.render,200))},render:function(){return document.documentElement.clientWidth>1023&&this.el.getAttribute("data-background-desktop")?this.layoutBackground("desktop"):document.documentElement.clientWidth>767&&this.el.getAttribute("data-background-tablet")?this.layoutBackground("tablet"):this.$el.removeAttr("style"),this},layoutBackground:function(e){this.$el.css({backgroundImage:"url("+this.el.getAttribute("data-background-"+e)+")",minHeight:9*document.documentElement.clientWidth/16+"px",height:this.$(".topic-splash__content").height()+"px"})},remove:function(){i(window).off("."+this.cid),o.View.prototype.remove.call(this)}})},function(e,t,n){"use strict";function i(){a(".url-breadcrumb.is-unprocessed").each(function(){var e=a(this),t=e.prevAll(".url-breadcrumb").first();e.removeClass("is-unprocessed").waypoint({handler:function(n){var i=e;if("up"===n){if(0===t.length)return;i=t}i.hasClass("is-active")||o(i.data("url-breadcrumb"),i.data("content-type")||"unknown",i,n)},offset:"30%"})})}function r(e,t){a(".url-breadcrumb").removeClass("is-active"),t.addClass("is-active")}function o(e,t,n,i,r){f(),c.trigger("urlChange:pre",t,n),h(l(n).title),u.navigate(e+p,r),window.PGM.events.trigger("urlChange:post",t,n,i)}var a=n(0),s=n(1),d=n(3),c=n(4),l=n(35).getContentInfo,u=new d.Router,f=s.once(function(){d.history.start({pushState:!0})}),p=document.location.search||"",h=function(e,t){var n=e.lastIndexOf("|");return n>-1&&(t=" "+e.substr(n)),function(e){"undefined"!=typeof e&&e.length&&(document.title=e+t)}}(document.title,"");window.PGM.events.on("urlChange:pre",r),window.PGM.events.on("contentLoaded",i),e.exports={changeUrl:o}},function(e,t){"use strict";e.exports={touch:"ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch}},,function(e,t,n){"use strict";var i=n(2)("chartbeat"),r=n(25);e.exports=function(e,t){var n=r(t);"undefined"!=typeof window._sf_async_config&&(window._sf_async_config.authors=n.authors,window._sf_async_config.sections=n.chartbeatSection,window._sf_async_config.title=n.title,window._sf_async_config.path=n.canonical),"undefined"!=typeof window.pSUPERFLY&&"function"==typeof window.pSUPERFLY.virtualPage?(i("Calling virtualPage on",n.canonical,n.title,window._sf_async_config),window.pSUPERFLY.virtualPage(n.canonical,n.title)):i("Cannot call virtualPage due to",window.pSUPERFLY)}},function(e,t,n){"use strict";function i(){"undefined"!=typeof window.COMSCORE&&"function"==typeof window.COMSCORE.beacon&&window.comscoreVars?(a("call beacon",window.COMSCORE,window.comscoreVars),window.COMSCORE.beacon(window.comscoreVars)):a("did not call beacon",window.COMSCORE,window.comscoreVars)}function r(e,t){return"undefined"==typeof t||"function"!=typeof t.data?void a("unable to track with content",t):(a("request to track via",document.location.href),void o.ajax("/fe_data/pageview_candidate/"+(t.data("id")||++s),{data:{_pgmignore:Date.now()},success:i,error:function(){a("error on ajax return",arguments)}}))}var o=n(0),a=n(2)("comscore"),s=0;e.exports=r},function(e,t,n){"use strict";var i=n(0),r=n(2)("ga"),o=null,a=null;e.exports={setCategory:function(e){o=e.toString(),r("tracking category set to "+o)},setAction:function(e){a=e.toString(),r("tracking action set to "+a)},trackEvent:function(e){var t=i.extend({event:"trackEvent",category:o,action:a,label:null,value:null,nonInteraction:!0},e);r("trackEvent",e,t),window._gaq.push(["_trackEvent",t.category,t.action,t.label,t.value,t.nonInteraction]),window.dataLayer.push(t)},trackPageview:function(e){var t=i.extend({event:"scrollPageview",path:window.location.pathname},e);t.pathName=t.path,delete t.path,r("trackPageview",e,t),window._gaq.push(["_trackPageview",t.pathName]),window.dataLayer.push(t)}}},function(e,t,n){"use strict";var i=n(4),r=n(25);e.exports=function(e,t){var n=r(t);i.trigger("trackPageview",{fireGTM:"on",contentId:n.id,author:n.authors,publishDate:n.publishDate,category:n.analyticsCategory,tags:n.analyticsTags})}},function(e,t,n){"use strict";var i=n(36);e.exports=i.embeds.getBaseModel().extend({makeImagecacheSrc:function(e){var t="files",n={portrait:"320x416_gallery",square:"320x320","default":"480x270"};return this.makeImageSrc(e.path).replace(t,[t,"styles",n[e.orientation]||n["default"],"public"].join("/"))}})},function(e,t,n){"use strict";var i=n(104),r=n(106),o=n(105);e.exports={initialize:function(){var e=this.$(".js-hasSpotifyType"),t=this.$(".js-audio-element");this.$(".time-machine").length>0&&new r({el:this.$(".time-machine")}).render(),this.$(".ye-chart__how-it-works").length>0&&new i({el:this.$(".ye-chart__how-it-works")}).render(),this.$(".ye-chart__item").each(function(n,i){return new o({el:i,$spotifyDataSource:e,$audioElement:t}).render()})}}},function(e,t,n){"use strict";var i=n(3);e.exports=i.View.extend({events:{"click .js-toggle-modal":"toggleModal"},toggleModal:function(){this.$el.toggleClass("ye-chart__how-it-works--visible")}})},function(e,t,n){"use strict";var i=n(0),r=n(1),o=n(3),a=n(4),s=n(108),d=n(112);e.exports=o.View.extend({initialize:function(e){var t=this.$el.attr("data-spotify-id"),n=this.$el.attr("data-spotify-url"),i=this.$(".ye-chart__item-title").first().text().trim();if(this.spotifyPreviewView=null,this.spotifyFooterView=null,t&&t.length>1){var o={title:i,spotifyId:t,spotifyUrl:n,$dataSource:e.$spotifyDataSource,$audioElement:e.$audioElement};this.spotifyPreviewView=new d(r.extend({},o,{template:window.PGM.JST["chart/spotify/preview"],el:this.$(".js-spotifyPreview-wrapper")})),this.spotifyFooterView=new d(r.extend({},o,{template:window.PGM.JST["chart/spotify/footer"],el:this.$(".js-spotifyFooter-wrapper")})),this.listenTo(this.spotifyPreviewView,"change",this.render),this.listenTo(this.spotifyFooterView,"change",this.render)}parseInt(this.$el.data("rank"),10)%10===0&&this.$el.waypoint({triggerOnce:!0,offset:"100%",handler:function(){a.trigger("trackEvent",{category:"chart",action:"item",label:"scroll",value:10})}}),new s({el:this.$(".ye-chart__vote")}).render()},render:function(){return null!==this.spotifyPreviewView&&(this.$(".js-spotifyPreview").html(this.spotifyPreviewView.render().$el),this.$(".js-spotifyFooter").html(this.spotifyFooterView.render().$el)),this},events:{"click a.ye-chart__item-nav-link":"showChartItemSupplementary"},showChartItemSupplementary:function(e){e.preventDefault(),e.currentTarget.getAttribute("data-href")?(a.trigger("trackEvent",{category:"chart",action:"play-video",label:this.$(".ye-chart__item-title").text().trim().toLowerCase()}),i.magnificPopup.open({items:{src:e.target.getAttribute("data-href")},type:"iframe"})):(this.$(".ye-chart__item-nav-link").removeClass("ye-chart__item-nav-link--active").filter(e.currentTarget).addClass("ye-chart__item-nav-link--active"),this.$(".ye-chart__item-supplementary").removeClass("ye-chart__item-supplementary--active").filter(e.currentTarget.hash).addClass("ye-chart__item-supplementary--active"))}})},function(e,t,n){"use strict";var i=n(3),r=n(107);e.exports=i.View.extend({initialize:function(){var e=this,t=this.$(".time-machine__nav-label");this.slider=this.$(".time-machine__items").bxSlider({pager:!1,infiniteLoop:!1,nextSelector:".time-machine__nav-links",prevSelector:".time-machine__nav-links",slideWidth:this.$(".time-machine__nav").width(),hideControlOnEnd:!0,onSlideAfter:function(n){var i=parseInt(n.attr("data-year"),10);e.removePlayer(),t.text(i).prev(".time-machine__nav-links").find(".bx-next").text(i+1).next(".bx-prev").text(i-1),e.$currentSlide=n}}),this.slider.goToSlide(this.slider.getSlideCount()-2)},events:{"click .time-machine__item-media":"startVideo"},startVideo:function(){this.videoPlayer=new r.View({model:new r.Model({playerId:this.$currentSlide.find("[data-player-id]").data("player-id"),videoId:this.$currentSlide.find("[data-video-id]").data("video-id")})}),this.videoPlayer.setDimensions({height:this.$currentSlide.find(".time-machine__item-media").height(),width:this.$currentSlide.find(".time-machine__item-media").width()}),this.videoPlayer.render().$el.insertAfter(this.$currentSlide.find(".time-machine__item-media").hide()),this.listenTo(this.videoPlayer,"ended",this.removePlayer)},removePlayer:function(){this.videoPlayer&&(this.stopListening(this.videoPlayer),this.videoPlayer.remove(),this.videoPlayer=null,this.$(".time-machine__item-media").show())}})},function(e,t,n){"use strict";function i(e){return o("//players.brightcove.net/1125911414/"+e+"_default/index.min.js")}var r=n(3),o=n(10).createScriptTag,a=r.View.extend({tagName:"video",className:"video-js",initialize:function(){i(this.model.get("playerId"))},attributes:function(){return{controls:"controls",autoplay:"autoplay",id:"video-js-"+this.model.get("videoId"),"data-embed":"default","data-account":"1125911414","data-player":this.model.get("playerId"),"data-video-id":this.model.get("videoId")}},setDimensions:function(e){this.el.setAttribute("height",e.height),this.el.setAttribute("width",e.width)},render:function(){var e=this;return i(this.model.get("playerId")).then(function(){e.player||(e.player=window.videojs("video-js-"+e.model.get("videoId")),e.player.ready(function(){this.on("ended",function(){e.trigger("ended")})}))}),this},remove:function(){this.player&&this.player.dispose(),this.player=null,r.View.prototype.remove.call(this)}});e.exports={Model:r.Model.extend(),View:a}},function(e,t,n){"use strict";var i=n(3);e.exports=i.View.extend({events:"ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch?{"touchend .ye-chart__vote-tooltip-wrapper":"toggleTooltip"}:{"mouseenter .ye-chart__vote-tooltip-wrapper":"toggleTooltip","mouseleave .ye-chart__vote-tooltip-wrapper":"toggleTooltip"},toggleTooltip:function(){this.$(".ye-chart__vote-info-tooltip").toggleClass("ye-chart__vote-info-tooltip--visible")}})},function(e,t,n){"use strict";var i=n(1),r=n(113),o=n(110),a=n(111),s=n(2)("spotify"),d=n(4),c=function(e,t){d.trigger("trackEvent",{action:e,label:t})},l={},u=function(e,t){var n=e.attr("data-spotify-type");if("undefined"==typeof n)return Promise.reject("undefined type from: "+e);switch(n){case"track":return o(e,t);case"artist":case"album":return a(e,t);default:return Promise.reject("unknown type: "+n)}},f=function(e,t,n,i){var o=e.attr("data-spotify-type");return l.hasOwnProperty(n)||(l[n]=new r(t,o,i,u(e,n))),l[n]},p=null,h=null,g=null,m=i.once(function(e){e.on("ended.previews",function(){null!==h&&h()})}),v=function(e,t,n){return m(e),function(){return new Promise(function(e,i){h=e,g=i,t.pause(),isNaN(t.duration)||(t.currentTime=0),t.src=n.previewUrl,t.play()})}},y=function(e,t){i.defer(function(){e.set("playing",t)})},b=function(e,t,n){var i=n.get("previews");if(!n.hasPreviews())return void s("no previews for",n);y(n,!0);for(var r=Promise.resolve(!0),o=0;o<i.length;o++)r=r.then(v(e,t,i[o]));r.then(function(){y(n,!1),h=null,g=null})["catch"](function(){console.log("promise caught",arguments)})},w=function(e,t){var n=e[0];if("undefined"==typeof n)return void s("audioElement undefined");if(t!==p){if(null!==g)try{p.set("playing",!1),g(),g=null}catch(i){s("issue rejecting",i)}p=t,c("play-preview",t.get("title")),b(e,n,t)}else try{t.get("playing")?(y(t,!1),n.pause()):(y(t,!0),n.play())}catch(i){s("issue playing/pausing",i)}},x=function(e,t){c("play-fulltrack",t.get("title"));var n=e[0];if("undefined"==typeof n)return void s("audioElement undefined");var i=t.get("spotifyUrl");if(null!==p)try{y(p,!1),n.pause()}catch(r){s("issue playing/pausing",r)}window.open(i,"_blank")};e.exports={getModel:f,togglePreview:w,openSpotifyUrl:x}},function(e,t,n){"use strict";var i=n(0),r=n(24),o={},a={},s=function(e,t){var n=e.attr("data-chart-code"),s=e.attr("data-chart-date");if("undefined"==typeof n)return Promise.reject("chartCode undefined");if("undefined"==typeof s)return Promise.reject("date undefined");var d=["/fe-ajax/spotify/preview/chart-tracks",n,s,r].join("/");if(o[d])return Promise.resolve([o[d][t]]);if("undefined"==typeof a[d]){var c=new Promise(function(e,t){i.ajax({type:"GET",url:d,success:function(t){o[d]={};for(var n=0;n<t.length;n++){var i=t[n];o[d][i.originalId]=i.previews}delete a[d],e()},error:function(){t()}})});a[d]=c}return a[d].then(function(){return[o[d][t]]})};e.exports=s},function(e,t,n){"use strict";var i=n(0),r=n(24),o=function(e,t){var n=e.attr("data-spotify-type"),o=null;if("artist"===n)o="/fe-ajax/spotify/preview/artist-tracks/"+t+"/"+r;else{if("album"!==n)return Promise.reject("spotifyType unknown:"+n);o="/fe-ajax/spotify/preview/album-tracks/"+t+"/"+r}var a,s=new Promise(function(e){a=e}).then(function(){return new Promise(function(e,t){i.ajax({type:"GET",url:o,success:function(t){e(t.previews)},error:function(){t()}})})});return Promise.resolve([[],s,a])};e.exports=o},function(e,t,n){"use strict";var i=n(1),r=n(3),o=n(109),a=function(e){var t=r.View.extend({initialize:function(e){i.bindAll(this,"render","doSpotifyPreview","doSpotifyUrl"),this.template=e.template,this.model=o.getModel(e.$dataSource,e.title,e.spotifyId,e.spotifyUrl),this.$audioElement=e.$audioElement,this.listenTo(this.model,"change",this.triggerChange)},triggerChange:function(){this.trigger("change")},render:function(){return this.model.get("previews")&&this.$el.html(this.template(this.model.toJSON())),this},events:{"click .js-spotify-preview":"doSpotifyPreview","click .js-spotify-spotifyUrl":"doSpotifyUrl"},doSpotifyPreview:function(){var e=this;this.model.getPreviewsPromise().then(function(){o.togglePreview(e.$audioElement,e.model)})},doSpotifyUrl:function(){o.openSpotifyUrl(this.$audioElement,this.model)}});return new t(e)};e.exports=a},function(e,t,n){"use strict";var i=n(3),r=i.Model.extend({initialize:function(e,t,n,i){var r=this,o=null;o="artist"===t?"artist":"album"===t?"full album":"full track",this.set({title:e,spotifyType:t,spotifyUrl:n,footerType:o}),i.then(function(e){var t=e[0];r.fetchPromise=e[1],r.requestData=e[2],r.set({previews:t,playing:!1})})},hasPreviews:function(){var e=this.get("previews");return"undefined"!=typeof e&&e.length>0},getPreviewsPromise:function(){var e=this;return this.hasPreviews()?Promise.resolve(!0):new Promise(function(t){e.fetchPromise.then(function(t){e.set({previews:t,playing:!1})}).then(t),e.requestData()})}});e.exports=r},,,function(e,t){e.exports=function(e,t,n,i){if(!(e instanceof t)||void 0!==i&&i in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){"use strict";var i=n(50),r=n(49),o=n(21);e.exports=function(e){for(var t=i(this),n=o(t.length),a=arguments.length,s=r(a>1?arguments[1]:void 0,n),d=a>2?arguments[2]:void 0,c=void 0===d?n:r(d,n);c>s;)t[s++]=e;return t}},function(e,t,n){var i=n(33),r=n(21),o=n(49);e.exports=function(e){return function(t,n,a){var s,d=i(t),c=r(d.length),l=o(a,c);if(e&&n!=n){for(;c>l;)if(s=d[l++],s!=s)return!0}else for(;c>l;l++)if((e||l in d)&&d[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var i=n(5)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[i]=!1,!"/./"[e](t)}catch(r){}}return!0}},function(e,t,n){var i=n(17),r=n(126),o=n(124),a=n(7),s=n(21),d=n(142),c={},l={},t=e.exports=function(e,t,n,u,f){var p,h,g,m,v=f?function(){return e}:d(e),y=i(n,u,t?2:1),b=0;if("function"!=typeof v)throw TypeError(e+" is not iterable!");if(o(v)){for(p=s(e.length);p>b;b++)if(m=t?y(a(h=e[b])[0],h[1]):y(e[b]),m===c||m===l)return m}else for(g=v.call(e);!(h=g.next()).done;)if(m=r(g,y,h.value,t),m===c||m===l)return m};t.BREAK=c,t.RETURN=l},function(e,t,n){e.exports=!n(12)&&!n(42)(function(){return 7!=Object.defineProperty(n(29)("div"),"a",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e,t,n){var i=void 0===n;switch(t.length){case 0:return i?e():e.call(n);case 1:return i?e(t[0]):e.call(n,t[0]);case 2:return i?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return i?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return i?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var i=n(11);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==i(e)?e.split(""):Object(e)}},function(e,t,n){var i=n(15),r=n(5)("iterator"),o=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||o[r]===e)}},function(e,t,n){var i=n(14),r=n(11),o=n(5)("match");e.exports=function(e){var t;return i(e)&&(void 0!==(t=e[o])?!!t:"RegExp"==r(e))}},function(e,t,n){var i=n(7);e.exports=function(e,t,n,r){try{return r?t(i(n)[0],n[1]):t(n)}catch(o){var a=e["return"];throw void 0!==a&&i(a.call(e)),o}}},function(e,t,n){"use strict";var i=n(131),r=n(46),o=n(30),a={};n(9)(a,n(5)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=i(a,{next:r(1,n)}),o(e,t+" Iterator")}},function(e,t,n){var i=n(5)("iterator"),r=!1;try{var o=[7][i]();o["return"]=function(){r=!0},Array.from(o,function(){throw 2})}catch(a){}e.exports=function(e,t){if(!t&&!r)return!1;var n=!1;try{var o=[7],a=o[i]();a.next=function(){return{done:n=!0}},o[i]=function(){return a},e(o)}catch(s){}return n}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){var i=n(6),r=n(48).set,o=i.MutationObserver||i.WebKitMutationObserver,a=i.process,s=i.Promise,d="process"==n(11)(a);e.exports=function(){var e,t,n,c=function(){var i,r;for(d&&(i=a.domain)&&i.exit();e;){r=e.fn,e=e.next;try{r()}catch(o){throw e?n():t=void 0,o}}t=void 0,i&&i.enter()};if(d)n=function(){a.nextTick(c)};else if(o){var l=!0,u=document.createTextNode("");new o(c).observe(u,{characterData:!0}),n=function(){u.data=l=!l}}else if(s&&s.resolve){var f=s.resolve();n=function(){f.then(c)}}else n=function(){r.call(i,c)};return function(i){var r={fn:i,next:void 0};t&&(t.next=r),e||(e=r,n()),t=r}}},function(e,t,n){var i=n(7),r=n(132),o=n(41),a=n(31)("IE_PROTO"),s=function(){},d="prototype",c=function(){var e,t=n(29)("iframe"),i=o.length,r="<",a=">";for(t.style.display="none",n(43).appendChild(t),t.src="javascript:",e=t.contentWindow.document,e.open(),e.write(r+"script"+a+"document.F=Object"+r+"/script"+a),e.close(),c=e.F;i--;)delete c[d][o[i]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(s[d]=i(e),n=new s,s[d]=null,n[a]=e):n=c(),void 0===t?n:r(n,t)}},function(e,t,n){var i=n(20),r=n(7),o=n(135);e.exports=n(12)?Object.defineProperties:function(e,t){r(e);for(var n,a=o(t),s=a.length,d=0;s>d;)i.f(e,n=a[d++],t[n]);return e}},function(e,t,n){var i=n(13),r=n(50),o=n(31)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=r(e),i(e,o)?e[o]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){var i=n(13),r=n(33),o=n(118)(!1),a=n(31)("IE_PROTO");e.exports=function(e,t){var n,s=r(e),d=0,c=[];for(n in s)n!=a&&i(s,n)&&c.push(n);for(;t.length>d;)i(s,n=t[d++])&&(~o(c,n)||c.push(n));return c}},function(e,t,n){var i=n(134),r=n(41);e.exports=Object.keys||function(e){return i(e,r)}},function(e,t,n){var i=n(16);e.exports=function(e,t,n){for(var r in t)i(e,r,t[r],n);return e}},function(e,t,n){"use strict";var i=n(6),r=n(20),o=n(12),a=n(5)("species");e.exports=function(e){var t=i[e];o&&t&&!t[a]&&r.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t,n){var i=n(7),r=n(27),o=n(5)("species");e.exports=function(e,t){var n,a=i(e).constructor;return void 0===a||void 0==(n=i(a)[o])?t:r(n)}},function(e,t,n){var i=n(32),r=n(18);e.exports=function(e){return function(t,n){var o,a,s=String(r(t)),d=i(n),c=s.length;return d<0||d>=c?e?"":void 0:(o=s.charCodeAt(d),o<55296||o>56319||d+1===c||(a=s.charCodeAt(d+1))<56320||a>57343?e?s.charAt(d):o:e?s.slice(d,d+2):(o-55296<<10)+(a-56320)+65536)}}},function(e,t,n){var i=n(125),r=n(18);e.exports=function(e,t,n){if(i(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(r(e))}},function(e,t,n){var i=n(14);e.exports=function(e,t){if(!i(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!i(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!i(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!i(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var i=n(28),r=n(5)("iterator"),o=n(15);e.exports=n(8).getIteratorMethod=function(e){if(void 0!=e)return e[r]||e["@@iterator"]||o[i(e)]}},function(e,t,n){var i=n(19);i(i.P,"Array",{fill:n(117)}),n(40)("fill")},function(e,t,n){"use strict";var i=n(40),r=n(129),o=n(15),a=n(33);e.exports=n(44)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,r(1)):"keys"==t?r(0,n):"values"==t?r(0,e[n]):r(0,[n,e[n]])},"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(e,t,n){"use strict";var i=n(28),r={};r[n(5)("toStringTag")]="z",r+""!="[object z]"&&n(16)(Object.prototype,"toString",function(){return"[object "+i(this)+"]"},!0)},function(e,t,n){"use strict";var i,r,o,a=n(45),s=n(6),d=n(17),c=n(28),l=n(19),u=n(14),f=n(27),p=n(116),h=n(120),g=n(138),m=n(48).set,v=n(130)(),y="Promise",b=s.TypeError,w=s.process,x=s[y],w=s.process,_="process"==c(w),S=function(){},I=!!function(){try{var e=x.resolve(1),t=(e.constructor={})[n(5)("species")]=function(e){e(S,S)};return(_||"function"==typeof PromiseRejectionEvent)&&e.then(S)instanceof t}catch(i){}}(),T=function(e,t){return e===t||e===x&&t===o},A=function(e){var t;return!(!u(e)||"function"!=typeof(t=e.then))&&t},k=function(e){return T(x,e)?new E(e):new r(e)},E=r=function(e){var t,n;this.promise=new e(function(e,i){if(void 0!==t||void 0!==n)throw b("Bad Promise constructor");t=e,n=i}),this.resolve=f(t),this.reject=f(n)},C=function(e){try{e()}catch(t){return{error:t}}},P=function(e,t){if(!e._n){e._n=!0;var n=e._c;v(function(){for(var i=e._v,r=1==e._s,o=0,a=function(t){var n,o,a=r?t.ok:t.fail,s=t.resolve,d=t.reject,c=t.domain;try{a?(r||(2==e._h&&R(e),e._h=1),a===!0?n=i:(c&&c.enter(),n=a(i),c&&c.exit()),n===t.promise?d(b("Promise-chain cycle")):(o=A(n))?o.call(n,s,d):s(n)):d(i)}catch(l){d(l)}};n.length>o;)a(n[o++]);e._c=[],e._n=!1,t&&!e._h&&j(e)})}},j=function(e){m.call(s,function(){var t,n,i,r=e._v;if(O(e)&&(t=C(function(){_?w.emit("unhandledRejection",r,e):(n=s.onunhandledrejection)?n({promise:e,reason:r}):(i=s.console)&&i.error&&i.error("Unhandled promise rejection",r)}),e._h=_||O(e)?2:1),e._a=void 0,t)throw t.error})},O=function(e){if(1==e._h)return!1;for(var t,n=e._a||e._c,i=0;n.length>i;)if(t=n[i++],t.fail||!O(t.promise))return!1;return!0},R=function(e){m.call(s,function(){var t;_?w.emit("rejectionHandled",e):(t=s.onrejectionhandled)&&t({promise:e,reason:e._v})})},B=function(e){var t=this;t._d||(t._d=!0,t=t._w||t,t._v=e,t._s=2,t._a||(t._a=t._c.slice()),P(t,!0))},M=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw b("Promise can't be resolved itself");(t=A(e))?v(function(){var i={_w:n,_d:!1};try{t.call(e,d(M,i,1),d(B,i,1))}catch(r){B.call(i,r)}}):(n._v=e,n._s=1,P(n,!1))}catch(i){B.call({_w:n,_d:!1},i)}}};I||(x=function(e){p(this,x,y,"_h"),f(e),i.call(this);try{e(d(M,this,1),d(B,this,1))}catch(t){B.call(this,t)}},i=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},i.prototype=n(136)(x.prototype,{then:function(e,t){var n=k(g(this,x));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=_?w.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&P(this,!1),n.promise},"catch":function(e){return this.then(void 0,e)}}),E=function(){var e=new i;this.promise=e,this.resolve=d(M,e,1),this.reject=d(B,e,1)}),l(l.G+l.W+l.F*!I,{Promise:x}),n(30)(x,y),n(137)(y),o=n(8)[y],l(l.S+l.F*!I,y,{reject:function(e){var t=k(this),n=t.reject;return n(e),t.promise}}),l(l.S+l.F*(a||!I),y,{resolve:function(e){if(e instanceof x&&T(e.constructor,this))return e;var t=k(this),n=t.resolve;return n(e),t.promise}}),l(l.S+l.F*!(I&&n(128)(function(e){x.all(e)["catch"](S)})),y,{all:function(e){var t=this,n=k(t),i=n.resolve,r=n.reject,o=C(function(){var n=[],o=0,a=1;h(e,!1,function(e){var s=o++,d=!1;n.push(void 0),a++,t.resolve(e).then(function(e){d||(d=!0,n[s]=e,--a||i(n))},r)}),--a||i(n)});return o&&r(o.error),n.promise},race:function(e){var t=this,n=k(t),i=n.reject,r=C(function(){h(e,!1,function(e){t.resolve(e).then(n.resolve,i)})});return r&&i(r.error),n.promise}})},function(e,t,n){"use strict";var i=n(139)(!0);n(44)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=i(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){for(var i=n(144),r=n(16),o=n(6),a=n(9),s=n(15),d=n(5),c=d("iterator"),l=d("toStringTag"),u=s.Array,f=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],p=0;p<5;p++){var h,g=f[p],m=o[g],v=m&&m.prototype;if(v){v[c]||a(v,c,u),v[l]||a(v,l,g),s[g]=u;for(h in i)v[h]||r(v,h,i[h],!0)}}},function(e,t){!function(){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&n.rotl(e,8)|4278255360&n.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=n.endian(e[t]);return e},randomBytes:function(e){for(var t=[];e>0;e--)t.push(Math.floor(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],n=0,i=0;n<e.length;n++,i+=8)t[i>>>5]|=e[n]<<24-i%32;return t},wordsToBytes:function(e){for(var t=[],n=0;n<32*e.length;n+=8)t.push(e[n>>>5]>>>24-n%32&255);return t},bytesToHex:function(e){for(var t=[],n=0;n<e.length;n++)t.push((e[n]>>>4).toString(16)),t.push((15&e[n]).toString(16));return t.join("")},hexToBytes:function(e){for(var t=[],n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t},bytesToBase64:function(e){for(var n=[],i=0;i<e.length;i+=3)for(var r=e[i]<<16|e[i+1]<<8|e[i+2],o=0;o<4;o++)8*i+6*o<=8*e.length?n.push(t.charAt(r>>>6*(3-o)&63)):n.push("=");return n.join("")},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\/]/gi,"");for(var n=[],i=0,r=0;i<e.length;r=++i%4)0!=r&&n.push((t.indexOf(e.charAt(i-1))&Math.pow(2,-2*r+8)-1)<<2*r|t.indexOf(e.charAt(i))>>>6-2*r);return n}};e.exports=n}()},function(e,t,n){var i,r;!function(o,a){i=a,r="function"==typeof i?i.call(t,n,t,e):i,!(void 0!==r&&(e.exports=r))}("undefined"!=typeof window?window:this,function(){"use strict";function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var n=this._events=this._events||{},i=n[e]=n[e]||[];return i.indexOf(t)==-1&&i.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var n=this._onceEvents=this._onceEvents||{},i=n[e]=n[e]||{};return i[t]=!0,this}},t.off=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var i=n.indexOf(t);return i!=-1&&n.splice(i,1),this}},t.emitEvent=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var i=0,r=n[i];t=t||[];for(var o=this._onceEvents&&this._onceEvents[e];r;){var a=o&&o[r];a&&(this.off(e,r),delete o[r]),r.apply(this,t),i+=a?0:1,r=n[i]}return this}},e})},function(e,t,n){var i,r;/*!
 * imagesLoaded v4.1.1
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */
!function(o,a){"use strict";i=[n(150)],r=function(e){return a(o,e)}.apply(t,i),!(void 0!==r&&(e.exports=r))}(window,function(e,t){"use strict";function n(e,t){for(var n in t)e[n]=t[n];return e}function i(e){var t=[];if(Array.isArray(e))t=e;else if("number"==typeof e.length)for(var n=0;n<e.length;n++)t.push(e[n]);else t.push(e);return t}function r(e,t,o){return this instanceof r?("string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=i(e),this.options=n({},this.options),"function"==typeof t?o=t:n(this.options,t),o&&this.on("always",o),this.getImages(),s&&(this.jqDeferred=new s.Deferred),void setTimeout(function(){this.check()}.bind(this))):new r(e,t,o)}function o(e){this.img=e}function a(e,t){this.url=e,this.element=t,this.img=new Image}var s=e.jQuery,d=e.console;r.prototype=Object.create(t.prototype),r.prototype.options={},r.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},r.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&c[t]){for(var n=e.querySelectorAll("img"),i=0;i<n.length;i++){var r=n[i];this.addImage(r)}if("string"==typeof this.options.background){var o=e.querySelectorAll(this.options.background);for(i=0;i<o.length;i++){var a=o[i];this.addElementBackgroundImages(a)}}}};var c={1:!0,9:!0,11:!0};return r.prototype.addElementBackgroundImages=function(e){var t=getComputedStyle(e);if(t)for(var n=/url\((['"])?(.*?)\1\)/gi,i=n.exec(t.backgroundImage);null!==i;){var r=i&&i[2];r&&this.addBackground(r,e),i=n.exec(t.backgroundImage)}},r.prototype.addImage=function(e){var t=new o(e);this.images.push(t)},r.prototype.addBackground=function(e,t){var n=new a(e,t);this.images.push(n)},r.prototype.check=function(){function e(e,n,i){setTimeout(function(){t.progress(e,n,i)})}var t=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(t){t.once("progress",e),t.check()}):void this.complete()},r.prototype.progress=function(e,t,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emitEvent("progress",[this,e,t]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&d&&d.log("progress: "+n,e,t)},r.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(e,[this]),this.emitEvent("always",[this]),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},o.prototype=Object.create(t.prototype),o.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},o.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},o.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.img,t])},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},o.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},o.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},a.prototype=Object.create(o.prototype),a.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},a.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},a.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.element,t])},r.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(s=t,s.fn.imagesLoaded=function(e,t){var n=new r(this,e,t);return n.jqDeferred.promise(s(this))})},r.makeJQueryPlugin(),r})},function(e,t){(function(){!function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){for(var e=0;e<T.que.length;e++)if(b(T.que[e].called)===M)try{T.que[e].call(),T.que[e].called=!0}catch(t){k.logError("Error processing command :","prebid.js",t)}}function o(e){var t=T._bidsRequested.map(function(e){return e.bids.map(function(e){return e.placementCode})}).reduce(x.flatten).filter(x.uniques);return!!k.contains(t,e)||void k.logError('The "'+e+'" placement is not defined.')}function a(){x.isGptPubadsDefined()&&window.googletag.pubads().getSlots().forEach(function(e){q.forEach(function(t){e.setTargeting(t,null)})})}function s(e){window.googletag.pubads().getSlots().forEach(function(t){e.filter(function(e){return Object.keys(e)[0]===t.getAdUnitPath()||Object.keys(e)[0]===t.getSlotElementId()}).forEach(function(e){return e[Object.keys(e)[0]].forEach(function(e){e[Object.keys(e)[0]].map(function(n){return k.logMessage("Attempting to set key value for slot: "+t.getSlotElementId()+" key: "+Object.keys(e)[0]+" value: "+n),n}).forEach(function(n){t.setTargeting(Object.keys(e)[0],n)})})})})}function d(){return E.getStandardBidderAdServerTargeting().map(function(e){return e.key}).concat(A.TARGETING_KEYS).filter(x.uniques)}function c(e){var t=e?[e]:T._adUnitCodes;return T._bidsReceived.filter(function(e){return t.includes(e.adUnitCode)}).filter(function(e){return e.cpm>0}).map(function(e){return e.adUnitCode}).filter(x.uniques).map(function(e){return T._bidsReceived.filter(function(t){return t.adUnitCode===e?t:null}).reduce(x.getHighestCpm,{adUnitCode:e,cpm:0,adserverTargeting:{},timeToRespond:0})})}function l(){var e=c();e.filter(function(e){return e.dealId}).map(function(e){return e.adserverTargeting.hb_deal=e.dealId});var t=d();return e=e.map(function(e){return i({},e.adUnitCode,Object.keys(e.adserverTargeting).filter(function(n){return"undefined"==typeof e.sendStandardTargeting||e.sendStandardTargeting||-1===t.indexOf(n)}).map(function(t){return i({},t.substring(0,20),[e.adserverTargeting[t]])}))})}function u(){return T._bidsReceived.filter(function(e){return e.dealId}).map(function(e){var t="hb_deal_"+e.bidderCode;return i({},e.adUnitCode,h(e,A.TARGETING_KEYS).concat(i({},t.substring(0,20),[e.adserverTargeting[t]])))})}function f(e){var t=d();return T._bidsReceived.filter(x.adUnitsFilter.bind(this,e)).map(function(e){return e.alwaysUseBid?i({},e.adUnitCode,Object.keys(e.adserverTargeting).map(function(n){return t.indexOf(n)>-1?void 0:i({},n.substring(0,20),[e.adserverTargeting[n]])}).filter(function(e){return e})):void 0}).filter(function(e){return e})}function p(e){var t=A.TARGETING_KEYS;return T._bidsReceived.filter(x.adUnitsFilter.bind(this,e)).map(function(e){return e.adserverTargeting?i({},e.adUnitCode,h(e,t)):void 0}).filter(function(e){return e})}function h(e,t){return t.map(function(t){return i({},(t+"_"+e.bidderCode).substring(0,20),[e.adserverTargeting[t]])})}function g(e){var t=e&&e.length?[e]:T._adUnitCodes,n=l(t).concat(f(t)).concat(T._sendAllBids?p(t):[]).concat(u(t));return n.map(function(e){Object.keys(e).map(function(t){e[t].map(function(e){-1===q.indexOf(Object.keys(e)[0])&&(q=Object.keys(e).concat(q))})})}),n}function m(){T._bidsRequested=[],T._bidsReceived=T._bidsReceived.filter(function(e){return!T._adUnitCodes.includes(e.adUnitCode)})}function v(e,t,n){e.defaultView&&e.defaultView.frameElement&&(e.defaultView.frameElement.width=t,e.defaultView.frameElement.height=n)}var y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},w=n(1),x=n(2),_=n(4);n(19);var S=n(15),I=n(13),T=w.getGlobal(),A=n(3),k=n(2),E=n(12),C=n(5),P=n(11),j=n(18),O=n(8),R=n(20),B="function",M="undefined",N="object",U=A.EVENTS.BID_WON,D=A.EVENTS.AUCTION_END,z=!1,L=[],q=[],$={bidWon:o};T._bidsRequested=[],T._bidsReceived=[],T._adUnitCodes=[],T._winningBids=[],T._adsReceived=[],T._sendAllBids=!1,T.bidderSettings=T.bidderSettings||{},T.bidderTimeout=T.bidderTimeout||3e3,T.cbTimeout=T.cbTimeout||200,T.timeoutBuffer=200,T.logging=T.logging||!1,T.libLoaded=!0,T.version="v0.16.0",k.logInfo("Prebid.js v0.16.0 loaded"),T.adUnits=T.adUnits||[],T.que.push=function(e){if(("undefined"==typeof e?"undefined":b(e))===B)try{e.call()}catch(t){k.logError("Error processing command :"+t.message)}else k.logError("Commands written into pbjs.que.push must wrapped in a function")},T.getAdserverTargetingForAdUnitCodeStr=function(e){if(k.logInfo("Invoking pbjs.getAdserverTargetingForAdUnitCodeStr",arguments),e){var t=T.getAdserverTargetingForAdUnitCode(e);return k.transformAdServerTargetingObj(t)}k.logMessage("Need to call getAdserverTargetingForAdUnitCodeStr with adunitCode")},T.getAdserverTargetingForAdUnitCode=function(e){return T.getAdserverTargeting(e)[e]},T.getAdserverTargeting=function(e){return k.logInfo("Invoking pbjs.getAdserverTargeting",arguments),g(e).map(function(e){return i({},Object.keys(e)[0],e[Object.keys(e)[0]].map(function(e){return i({},Object.keys(e)[0],e[Object.keys(e)[0]].join(", "))}).reduce(function(e,t){return y(t,e)},{}))}).reduce(function(e,t){var n=Object.keys(t)[0];return e[n]=y({},e[n],t[n]),e},{})},T.getBidResponses=function(){k.logInfo("Invoking pbjs.getBidResponses",arguments);var e=T._bidsReceived.filter(x.adUnitsFilter.bind(this,T._adUnitCodes)),t=e&&e.length&&e[e.length-1].requestId;return e.map(function(e){return e.adUnitCode}).filter(x.uniques).map(function(n){return e.filter(function(e){return e.requestId===t&&e.adUnitCode===n})}).filter(function(e){return e&&e[0]&&e[0].adUnitCode}).map(function(e){return i({},e[0].adUnitCode,{bids:e})}).reduce(function(e,t){return y(e,t)},{})},T.getBidResponsesForAdUnitCode=function(e){var t=T._bidsReceived.filter(function(t){return t.adUnitCode===e});return{bids:t}},T.setTargetingForGPTAsync=function(){return k.logInfo("Invoking pbjs.setTargetingForGPTAsync",arguments),x.isGptPubadsDefined()?(a(),void s(g())):void k.logError("window.googletag is not defined on the page")},T.allBidsAvailable=function(){return k.logInfo("Invoking pbjs.allBidsAvailable",arguments),E.bidsBackAll()},T.renderAd=function(e,t){if(k.logInfo("Invoking pbjs.renderAd",arguments),k.logMessage("Calling renderAd with adId :"+t),e&&t)try{var n=T._bidsReceived.find(function(e){return e.adId===t});if(n){T._winningBids.push(n),O.emit(U,n);var i=n.height,r=n.width,o=n.adUrl,a=n.ad;e===document||"video"===n.mediaType?k.logError("Error trying to write ad. Ad render call ad id "+t+" was prevented from writing to the main document."):a?(e.write(a),e.close(),v(e,r,i)):o?(e.write('<IFRAME SRC="'+o+'" FRAMEBORDER="0" SCROLLING="no" MARGINHEIGHT="0" MARGINWIDTH="0" TOPMARGIN="0" LEFTMARGIN="0" ALLOWTRANSPARENCY="true" WIDTH="'+r+'" HEIGHT="'+i+'"></IFRAME>'),e.close(),v(e,r,i)):k.logError("Error trying to write ad. No ad for bid response id: "+t)}else k.logError("Error trying to write ad. Cannot find ad by given id : "+t)}catch(s){k.logError("Error trying to write ad Id :"+t+" to the page:"+s.message)}else k.logError("Error trying to write ad Id :"+t+" to the page. Missing document or adId")},T.removeAdUnit=function(e){if(k.logInfo("Invoking pbjs.removeAdUnit",arguments),e)for(var t=0;t<T.adUnits.length;t++)T.adUnits[t].code===e&&T.adUnits.splice(t,1)},T.clearAuction=function(){z=!1,k.logMessage("Prebid auction cleared"),O.emit(D),L.length&&L.shift()()},T.requestBids=function(e){var t=e.bidsBackHandler,n=e.timeout,i=e.adUnits,r=e.adUnitCodes,o=T.cbTimeout=n||T.bidderTimeout;i=i||T.adUnits,k.logInfo("Invoking pbjs.requestBids",arguments),r&&r.length?i=i.filter(function(e){return r.includes(e.code)}):r=i&&i.map(function(e){return e.code});var a=i.filter(_.videoAdUnit).filter(_.hasNonVideoBidder);if(a.forEach(function(e){k.logError("adUnit "+e.code+" has 'mediaType' set to 'video' but contains a bidder that doesn't support video. No Prebid demand requests will be triggered for this adUnit.");for(var t=0;t<i.length;t++)i[t].code===e.code&&i.splice(t,1)}),z)return void L.push(function(){T.requestBids({bidsBackHandler:t,timeout:o,adUnits:i,adUnitCodes:r})});if(z=!0,T._adUnitCodes=r,E.externalCallbackReset(),m(),!i||0===i.length)return k.logMessage("No adUnits configured. No bids requested."),("undefined"==typeof t?"undefined":b(t))===B&&E.addOneTimeCallback(t,!1),void E.executeCallback();var s=!0,d=E.executeCallback.bind(E,s),c=setTimeout(d,o);("undefined"==typeof t?"undefined":b(t))===B&&E.addOneTimeCallback(t,c),C.callBids({adUnits:i,adUnitCodes:r,cbTimeout:o}),0===T._bidsRequested.length&&E.executeCallback()},T.addAdUnits=function(e){k.logInfo("Invoking pbjs.addAdUnits",arguments),k.isArray(e)?T.adUnits.push.apply(T.adUnits,e):("undefined"==typeof e?"undefined":b(e))===N&&T.adUnits.push(e)},T.onEvent=function(e,t,n){return k.logInfo("Invoking pbjs.onEvent",arguments),k.isFn(t)?n&&!$[e].call(null,n)?void k.logError('The id provided is not valid for event "'+e+'" and no handler was set.'):void O.on(e,t,n):void k.logError('The event handler provided is not a function and was not set on event "'+e+'".')},T.offEvent=function(e,t,n){k.logInfo("Invoking pbjs.offEvent",arguments),(!n||$[e].call(null,n))&&O.off(e,t,n)},T.addCallback=function(e,t){k.logInfo("Invoking pbjs.addCallback",arguments);var n=null;return e&&t&&("undefined"==typeof t?"undefined":b(t))===B?(n=k.getUniqueIdentifierStr,E.addCallback(n,t,e),n):(k.logError("error registering callback. Check method signature"),n)},T.removeCallback=function(){return null},T.registerBidAdapter=function(e,t){k.logInfo("Invoking pbjs.registerBidAdapter",arguments);try{C.registerBidAdapter(e(),t)}catch(n){k.logError("Error registering bidder adapter : "+n.message)}},T.registerAnalyticsAdapter=function(e){k.logInfo("Invoking pbjs.registerAnalyticsAdapter",arguments);try{C.registerAnalyticsAdapter(e)}catch(t){k.logError("Error registering analytics adapter : "+t.message)}},T.bidsAvailableForAdapter=function(e){k.logInfo("Invoking pbjs.bidsAvailableForAdapter",arguments),T._bidsRequested.find(function(t){return t.bidderCode===e}).bids.map(function(t){return y(t,P.createBid(1),{bidderCode:e,adUnitCode:t.placementCode})}).map(function(e){return T._bidsReceived.push(e)})},T.createBid=function(e){return k.logInfo("Invoking pbjs.createBid",arguments),P.createBid(e)},T.addBidResponse=function(e,t){k.logInfo("Invoking pbjs.addBidResponse",arguments),E.addBidResponse(e,t)},T.loadScript=function(e,t,n){k.logInfo("Invoking pbjs.loadScript",arguments),j.loadScript(e,t,n)},T.enableAnalytics=function(e){e&&!k.isEmpty(e)?(k.logInfo("Invoking pbjs.enableAnalytics for: ",e),C.enableAnalytics(e)):k.logError("pbjs.enableAnalytics should be called with option {}")},T.aliasBidder=function(e,t){k.logInfo("Invoking pbjs.aliasBidder",arguments),e&&t?C.aliasBidAdapter(e,t):k.logError("bidderCode and alias must be passed as arguments","pbjs.aliasBidder")},T.setPriceGranularity=function(e){if(k.logInfo("Invoking pbjs.setPriceGranularity",arguments),!e)return void k.logError("Prebid Error: no value passed to `setPriceGranularity()`");if("string"==typeof e)E.setPriceGranularity(e);else if("object"===("undefined"==typeof e?"undefined":b(e))){if(!I.isValidePriceConfig(e))return void k.logError("Invalid custom price value passed to `setPriceGranularity()`");E.setCustomPriceBucket(e),E.setPriceGranularity(A.GRANULARITY_OPTIONS.CUSTOM),k.logMessage("Using custom price granularity")}},T.enableSendAllBids=function(){T._sendAllBids=!0},T.getAllWinningBids=function(){return T._winningBids},T.buildMasterVideoTagFromAdserverTag=function(e,t){k.logInfo("Invoking pbjs.buildMasterVideoTagFromAdserverTag",arguments);var n=S.parse(e);if(0===T._bidsReceived.length)return e;var i="";if("dfp"!==t.adserver.toLowerCase())return void k.logError("Only DFP adserver is supported");var r=R.dfpAdserver(t,n);return r.verifyAdserverTag()||k.logError("Invalid adserverTag, required google params are missing in query string"),r.appendQueryParams(),i=S.format(r.urlComponents)},T.setBidderSequence=function(e){e===A.ORDER.RANDOM&&C.setBidderSequence(A.ORDER.RANDOM)},T.getHighestCpmBids=function(e){return c(e)},r()},function(e,t){"use strict";function n(){return window.pbjs}Object.defineProperty(t,"__esModule",{value:!0}),t.getGlobal=n,window.pbjs=window.pbjs||{},window.pbjs.que=window.pbjs.que||[]},function(e,t,n){"use strict";function i(){return E()+Math.random().toString(16).substr(2)}function r(){return window.console&&window.console.log}function o(e,t,n){return n.indexOf(e)===t}function a(e,t){return e.concat(t)}function s(e){return pbjs._bidsRequested.map(function(t){return t.bids.find(function(t){return t.bidId===e})}).find(function(e){return e})}function d(e){return Object.keys(e)}function c(e,t){return e[t]}function l(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:pbjs.adUnits;return e.map(function(e){return e.bids.map(function(e){return e.bidder}).reduce(a,[])}).reduce(a).filter(o)}function u(){return!!(window.googletag&&t.isFn(window.googletag.pubads)&&t.isFn(window.googletag.pubads().getSlots))||void 0}function f(e,t){return e.cpm===t.cpm?e.timeToRespond>t.timeToRespond?t:e:e.cpm<t.cpm?t:e}function p(e){for(var t=e.length;t>0;){var n=Math.floor(Math.random()*t);t--;var i=e[t];e[t]=e[n],e[n]=i}return e}function h(e,t){return e.includes(t&&t.placementCode||t&&t.adUnitCode)}Object.defineProperty(t,"__esModule",{value:!0});var g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.uniques=o,t.flatten=a,t.getBidRequest=s,t.getKeys=d,t.getValue=c,t.getBidderCodes=l,t.isGptPubadsDefined=u,t.getHighestCpm=f,t.shuffle=p,t.adUnitsFilter=h;var m=n(3),v="object",y="string",b="number",w=!1,x="Array",_="String",S="Function",I="Number",T=Object.prototype.toString,A=null;try{A=console.info.bind(window.console)}catch(k){}t.replaceTokenInString=function(e,t,n){return this._each(t,function(t,i){t=void 0===t?"":t;var r=n+i.toUpperCase()+n,o=new RegExp(r,"g");e=e.replace(o,t)}),e};var E=function(){var e=0;return function(){return e++,e}}();t.getUniqueIdentifierStr=i,t.generateUUID=function R(e){return e?(e^16*Math.random()>>e/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,R)},t.getBidIdParameter=function(e,t){return t&&t[e]?t[e]:""},t.tryAppendQueryString=function(e,t,n){return n?e+=t+"="+encodeURIComponent(n)+"&":e},t.parseQueryStringParameters=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t+=n+"="+encodeURIComponent(e[n])+"&");return t},t.transformAdServerTargetingObj=function(e){return e&&Object.getOwnPropertyNames(e).length>0?d(e).map(function(t){return t+"="+encodeURIComponent(c(e,t))}).join("&"):""},t.extend=function(e,t){return e=e||{},this._each(t,function(n,i){e[i]=g(t[i])===v?this.extend(e[i],t[i]):t[i]}),e},t.parseSizesInput=function(e){var t=[];if(("undefined"==typeof e?"undefined":g(e))===y){var n=e.split(","),i=/^(\d)+x(\d)+$/i;if(n)for(var r in n)O(n,r)&&n[r].match(i)&&t.push(n[r])}else if(("undefined"==typeof e?"undefined":g(e))===v){var o=e.length;if(o>0)if(2===o&&g(e[0])===b&&g(e[1])===b)t.push(this.parseGPTSingleSizeArray(e));else for(var a=0;o>a;a++)t.push(this.parseGPTSingleSizeArray(e[a]))}return t},t.parseGPTSingleSizeArray=function(e){return!this.isArray(e)||2!==e.length||isNaN(e[0])||isNaN(e[1])?void 0:e[0]+"x"+e[1]},t.getTopWindowLocation=function(){var e=void 0;try{e=window.top.location}catch(t){e=window.location}return e},t.getTopWindowUrl=function(){var e=void 0;try{e=this.getTopWindowLocation().href}catch(t){e=""}return e},t.logWarn=function(e){P()&&console.warn&&console.warn("WARNING: "+e)},t.logInfo=function(e,t){P()&&r()&&A&&(t&&0!==t.length||(t=""),A("INFO: "+e+(""===t?"":" : params : "),t))},t.logMessage=function(e){P()&&r()&&console.log("MESSAGE: "+e)},t.hasConsoleLogger=r;var C=function(e){return e?window.console.error?"error":"log":""}(r()),P=function(){return pbjs.logging===!1&&w===!1&&(pbjs.logging="TRUE"===j(m.DEBUG_MODE).toUpperCase(),w=!0),!!pbjs.logging};t.debugTurnedOn=P,t.logError=function(e,t,n){var i=t||"ERROR";P()&&r()&&console[C](console,i+": "+e,n||"")},t.createInvisibleIframe=function(){var e=document.createElement("iframe");return e.id=i(),e.height=0,e.width=0,e.border="0px",e.hspace="0",e.vspace="0",e.marginWidth="0",e.marginHeight="0",e.style.border="0",e.scrolling="no",e.frameBorder="0",e.src="about:blank",e.style.display="none",e};var j=function(e){var t="[\\?&]"+e+"=([^&#]*)",n=new RegExp(t),i=n.exec(window.location.search);return null===i?"":decodeURIComponent(i[1].replace(/\+/g," "))};t.hasValidBidRequest=function(e,t,n){function i(e,n){n===t[o]&&(r=!0)}for(var r=!1,o=0;o<t.length;o++)if(r=!1,this._each(e,i),!r)return this.logError("Params are missing for bid request. One of these required paramaters are missing: "+t,n),!1;return!0},t.addEventHandler=function(e,t,n){e.addEventListener?e.addEventListener(t,n,!0):e.attachEvent&&e.attachEvent("on"+t,n)},t.isA=function(e,t){return T.call(e)==="[object "+t+"]"},t.isFn=function(e){return this.isA(e,S)},t.isStr=function(e){return this.isA(e,_)},t.isArray=function(e){return this.isA(e,x)},t.isNumber=function(e){return this.isA(e,I)},t.isEmpty=function(e){if(!e)return!0;if(this.isArray(e)||this.isStr(e))return!(e.length>0);for(var t in e)if(hasOwnProperty.call(e,t))return!1;return!0},t.isEmptyStr=function(e){return this.isStr(e)&&(!e||0===e.length)},t._each=function(e,t){if(!this.isEmpty(e)){if(this.isFn(e.forEach))return e.forEach(t,this);var n=0,i=e.length;if(i>0)for(;i>n;n++)t(e[n],n,e);else for(n in e)hasOwnProperty.call(e,n)&&t.call(this,e[n],n)}},t.contains=function(e,t){if(this.isEmpty(e))return!1;if(this.isFn(e.indexOf))return-1!==e.indexOf(t);for(var n=e.length;n--;)if(e[n]===t)return!0;return!1},t.indexOf=function(){return Array.prototype.indexOf?Array.prototype.indexOf:void 0}(),t._map=function(e,t){if(this.isEmpty(e))return[];if(this.isFn(e.map))return e.map(t);var n=[];return this._each(e,function(i,r){n.push(t(i,r,e))}),n};var O=function(e,t){return e.hasOwnProperty?e.hasOwnProperty(t):"undefined"!=typeof e[t]&&e.constructor.prototype[t]!==e[t]};t.createTrackPixelHtml=function(e){if(!e)return"";var t=encodeURI(e),n='<div style="position:absolute;left:0px;top:0px;visibility:hidden;">';return n+='<img src="'+t+'"></div>'},t.getIframeDocument=function(e){if(e){var t=void 0;try{t=e.contentWindow?e.contentWindow.document:e.contentDocument.document?e.contentDocument.document:e.contentDocument}catch(n){this.logError("Cannot get iframe document",n)}return t}},t.getValueString=function(e,t,n){return void 0===t||null===t?n:this.isStr(t)?t:this.isNumber(t)?t.toString():void this.logWarn("Unsuported type for param: "+e+" required type: String")}},function(e){e.exports={JSON_MAPPING:{PL_CODE:"code",PL_SIZE:"sizes",PL_BIDS:"bids",BD_BIDDER:"bidder",BD_ID:"paramsd",BD_PL_ID:"placementId",ADSERVER_TARGETING:"adserverTargeting",BD_SETTING_STANDARD:"standard"},REPO_AND_VERSION:"prebid_prebid_0.16.0",DEBUG_MODE:"pbjs_debug",STATUS:{GOOD:1,NO_BID:2},CB:{TYPE:{ALL_BIDS_BACK:"allRequestedBidsBack",AD_UNIT_BIDS_BACK:"adUnitBidsBack",BID_WON:"bidWon"}},objectType_function:"function",objectType_undefined:"undefined",objectType_object:"object",objectType_string:"string",objectType_number:"number",EVENTS:{AUCTION_INIT:"auctionInit",AUCTION_END:"auctionEnd",BID_ADJUSTMENT:"bidAdjustment",BID_TIMEOUT:"bidTimeout",BID_REQUESTED:"bidRequested",BID_RESPONSE:"bidResponse",BID_WON:"bidWon"},EVENT_ID_PATHS:{bidWon:"adUnitCode"},ORDER:{RANDOM:"random"},GRANULARITY_OPTIONS:{LOW:"low",MEDIUM:"medium",HIGH:"high",AUTO:"auto",DENSE:"dense",CUSTOM:"custom"},TARGETING_KEYS:["hb_bidder","hb_adid","hb_pb","hb_size"]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasNonVideoBidder=t.videoAdUnit=void 0;var i=n(5),r=(t.videoAdUnit=function(e){return"video"===e.mediaType},function(e){return!i.videoAdapters.includes(e.bidder)});t.hasNonVideoBidder=function(e){return e.bids.filter(r).length}},function(e,t,n){"use strict";function i(e){var t=e.bidderCode,n=e.requestId,i=e.bidderRequestId,r=e.adUnits;return r.map(function(e){return e.bids.filter(function(e){return e.bidder===t}).map(function(t){var r=e.sizes;if(e.sizeMapping){var a=s.mapSizes(e);if(""===a)return"";r=a}return o(t,{placementCode:e.code,mediaType:e.mediaType,sizes:r,bidId:c.getUniqueIdentifierStr(),bidderRequestId:i,requestId:n})})}).reduce(a.flatten,[]).filter(function(e){return""!==e})}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},a=n(2),s=n(6),d=n(7),c=n(2),l=n(3),u=n(8),f={};t.bidderRegistry=f;var p={},h=null;t.callBids=function(e){var t=e.adUnits,n=e.cbTimeout,r=c.generateUUID(),o=Date.now(),s={timestamp:o,requestId:r};u.emit(l.EVENTS.AUCTION_INIT,s);var d=a.getBidderCodes(t);h===l.ORDER.RANDOM&&(d=a.shuffle(d)),d.forEach(function(e){var a=f[e];if(a){var s=c.getUniqueIdentifierStr(),d={bidderCode:e,requestId:r,bidderRequestId:s,bids:i({bidderCode:e,requestId:r,bidderRequestId:s,adUnits:t}),start:(new Date).getTime(),auctionStart:o,timeout:n};d.bids&&0!==d.bids.length&&(c.logMessage("CALLING BIDDER ======= "+e),pbjs._bidsRequested.push(d),u.emit(l.EVENTS.BID_REQUESTED,d),a.callBids(d))}else c.logError("Adapter trying to be called which does not exist: "+e+" adaptermanager.callBids")})},t.registerBidAdapter=function(e,t){e&&t?r(e.callBids)===l.objectType_function?f[t]=e:c.logError("Bidder adaptor error for bidder code: "+t+"bidder must implement a callBids() function"):c.logError("bidAdaptor or bidderCode not specified")},t.aliasBidAdapter=function(e,t){var n=f[t];if(("undefined"==typeof n?"undefined":r(n))===l.objectType_undefined){var i=f[e];if(("undefined"==typeof i?"undefined":r(i))===l.objectType_undefined)c.logError('bidderCode "'+e+'" is not an existing bidder.',"adaptermanager.aliasBidAdapter");else try{var o=null;i instanceof d.BaseAdapter?c.logError(e+" bidder does not currently support aliasing.","adaptermanager.aliasBidAdapter"):(o=i.createNew(),o.setBidderCode(t),this.registerBidAdapter(o,t))}catch(a){c.logError(e+" bidder does not currently support aliasing.","adaptermanager.aliasBidAdapter")}}else c.logMessage('alias name "'+t+'" has been already specified.')},t.registerAnalyticsAdapter=function(e){var t=e.adapter,n=e.code;t&&n?r(t.enableAnalytics)===l.objectType_function?(t.code=n,p[n]=t):c.logError('Prebid Error: Analytics adaptor error for analytics "'+n+'"\n        analytics adapter must implement an enableAnalytics() function'):c.logError("Prebid Error: analyticsAdapter or analyticsCode not specified")},t.enableAnalytics=function(e){c.isArray(e)||(e=[e]),c._each(e,function(e){var t=p[e.provider];t?t.enableAnalytics(e):c.logError("Prebid Error: no analytics adapter found in registry for\n        "+e.provider+".")})},t.setBidderSequence=function(e){h=e};var g=n(9);t.registerBidAdapter(new g,"rubicon");var m=n(16);t.registerBidAdapter(new m,"aol");var v=n(17);t.registerBidAdapter(new v,"appnexus"),t.videoAdapters=[]},function(e,t,n){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function r(e){if(!o(e.sizeMapping))return e.sizes;var t=a();if(!t){var n=e.sizeMapping.reduce(function(e,t){return e.minWidth<t.minWidth?t:e});return n.sizes?n.sizes:e.sizes}var i="",r=e.sizeMapping.find(function(e){return t>e.minWidth});return r&&r.sizes?(i=r.sizes,c.logMessage("AdUnit : "+e.code+" resized based on device width to : "+i)):c.logMessage("AdUnit : "+e.code+" not mapped to any sizes for device width. This request will be suppressed."),i}function o(e){return!!(c.isArray(e)&&e.length>0)||(c.logInfo("No size mapping defined"),!1)}function a(e){var t=e||l||window;return t.screen&&t.screen.width?t.screen.width:0}function s(e){l=e}Object.defineProperty(t,"__esModule",{value:!0}),t.setWindow=t.getScreenWidth=t.mapSizes=void 0;var d=n(2),c=i(d),l=void 0;t.mapSizes=r,t.getScreenWidth=a,t.setWindow=s},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();t.BaseAdapter=function(){function e(t){n(this,e),this.code=t}return i(e,[{key:"getCode",value:function(){return this.code}},{key:"setCode",value:function(e){this.code=e}},{key:"callBids",value:function(){throw"adapter implementation must override callBids method"}}]),e}()},function(e,t,n){"use strict";var i=n(2),r=n(3),o=Array.prototype.slice,a=Array.prototype.push,s=i._map(r.EVENTS,function(e){return e}),d=r.EVENT_ID_PATHS,c=[];e.exports=function(){function e(e,t){i.logMessage("Emitting event for: "+e);var r=t[0]||{},o=d[e],s=r[o],l=n[e]||{que:[]},u=i._map(l,function(e,t){return t}),f=[];c.push({eventType:e,args:r,id:s}),s&&i.contains(u,s)&&a.apply(f,l[s].que),a.apply(f,l.que),i._each(f,function(e){if(e)try{e.apply(null,t)}catch(n){i.logError("Error executing handler:","events.js",n)}})}function t(e){return i.contains(s,e)}var n={},r={};return r.on=function(e,r,o){if(t(e)){var a=n[e]||{que:[]};o?(a[o]=a[o]||{que:[]},a[o].que.push(r)):a.que.push(r),n[e]=a}else i.logError("Wrong event name : "+e+" Valid event names :"+s)},r.emit=function(t){var n=o.call(arguments,1);e(t,n)},r.off=function(e,t,r){var o=n[e];i.isEmpty(o)||i.isEmpty(o.que)&&i.isEmpty(o[r])||r&&(i.isEmpty(o[r])||i.isEmpty(o[r].que))||(r?i._each(o[r].que,function(e){var n=o[r].que;e===t&&n.splice(i.indexOf.call(n,e),1)}):i._each(o.que,function(e){var n=o.que;e===t&&n.splice(i.indexOf.call(n,e),1)}),n[e]=o)},r.get=function(){return n},r.getEvents=function(){var e=[];return i._each(c,function(t){var n=i.extend({},t);e.push(n)}),e},r}()},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function o(){function e(e){var i=e.bids||[];i.forEach(function(e){function i(t){try{m.logMessage("XHR callback function called for ad ID: "+e.bidId),n(t,e)}catch(i){"string"==typeof i?m.logWarn(i+" when processing rubicon response for placement code "+e.placementCode):m.logError("Error processing rubicon response for placement code "+e.placementCode,null,i);var r=f["default"].createBid(y.STATUS.NO_BID,e);r.bidderCode=e.bidder,r.error=i,h["default"].addBidResponse(e.placementCode,r)}}try{v.ajax(t(e),i,void 0,{withCredentials:!0})}catch(r){m.logError("Error sending rubicon request for placement code "+e.placementCode,null,r)}})}function t(e){e.startTime=(new Date).getTime();
var t=e.params,n=t.accountId,i=t.siteId,r=t.zoneId,a=t.position,s=t.keywords,c=t.visitor,l=t.inventory,u=t.userId,f=t.referrer;a=a||"btf";var p=o.masSizeOrdering(Array.isArray(e.params.sizes)?e.params.sizes.map(function(e){return(w[e]||"").split("x")}):e.sizes);if(p.length<1)throw"no valid sizes";var h=["account_id",n,"site_id",i,"zone_id",r,"size_id",p[0],"alt_size_ids",p.slice(1).join(",")||void 0,"p_pos",a,"rp_floor","0.01","tk_flint","pbjs.lite","p_screen_res",window.screen.width+"x"+window.screen.height,"kw",s,"tk_user_key",u];return null!==c&&"object"===("undefined"==typeof c?"undefined":d(c))&&m._each(c,function(e,t){return h.push("tg_v."+t,e)}),null!==l&&"object"===("undefined"==typeof l?"undefined":d(l))&&m._each(l,function(e,t){return h.push("tg_i."+t,e)}),h.push("rand",Math.random(),"rf",f?f:m.getTopWindowUrl()),h.reduce(function(e,t,n){return n%2===0&&void 0!==h[n+1]?e+t+"="+encodeURIComponent(h[n+1])+"&":e},"//fastlane.rubiconproject.com/a/api/fastlane.json?").slice(0,-1)}function n(e,t){var n=JSON.parse(e);if("object"!==("undefined"==typeof n?"undefined":d(n))||"ok"!==n.status||!Array.isArray(n.ads)||n.ads.length<1)throw"bad response";var o=n.ads;o=o.sort(i),o.forEach(function(e){if("ok"!==e.status)throw"bad ad status";var n=f["default"].createBid(y.STATUS.GOOD,t);n.creative_id=e.ad_id,n.bidderCode=t.bidder,n.cpm=e.cpm||0,n.ad=r(e.script,e.impression_id);var i=w[e.size_id].split("x").map(function(e){return Number(e)}),o=s(i,2);n.width=o[0],n.height=o[1],n.dealId=e.deal,h["default"].addBidResponse(t.placementCode,n)})}function i(e,t){return(t.cpm||0)-(e.cpm||0)}var r=function(e,t){return"<html>\n<head><script type='text/javascript'>inDapIF=true;</script></head>\n<body style='margin : 0; padding: 0;'>\n<!-- Rubicon Project Ad Tag -->\n<div data-rp-impression-id='"+t+"'>\n<script type='text/javascript'>"+e+"</script>\n</div>\n</body>\n</html>"};return a(l.createNew(b),{callBids:e,createNew:o.createNew})}var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},s=function(){function e(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(d){r=!0,o=d}finally{try{!i&&s["return"]&&s["return"]()}finally{if(r)throw o}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c=n(10),l=r(c),u=n(11),f=i(u),p=n(12),h=i(p),g=n(2),m=r(g),v=n(14),y=n(3),b="rubicon",w={1:"468x60",2:"728x90",8:"120x600",9:"160x600",10:"300x600",15:"300x250",16:"336x280",19:"300x100",43:"320x50",44:"300x50",48:"300x300",54:"300x1050",55:"970x90",57:"970x250",58:"1000x90",59:"320x80",61:"1000x1000",65:"640x480",67:"320x480",68:"1800x1000",72:"320x320",73:"320x160",83:"480x300",94:"970x310",96:"970x210",101:"480x320",102:"768x1024",113:"1000x300",117:"320x100",125:"800x250",126:"200x600"};m._each(w,function(e,t){return w[e]=t}),o.masSizeOrdering=function(e){var t=[15,2,9];return m.parseSizesInput(e).reduce(function(e,t){var n=parseInt(w[t],10);return n&&e.push(n),e},[]).sort(function(e,n){var i=t.indexOf(e),r=t.indexOf(n);return i>-1||r>-1?-1===i?1:-1===r?-1:i-r:e-n})},o.createNew=function(){return new o},e.exports=o},function(e,t){"use strict";function n(e){function t(e){r=e}function n(){return r}function i(){}var r=e;return{callBids:i,setBidderCode:t,getBidderCode:n}}t.createNew=function(e){return new n(e)}},function(e,t,n){"use strict";function i(e,t){function n(){switch(o){case 0:return"Pending";case 1:return"Bid available";case 2:return"Bid returned empty or error response";case 3:return"Bid timed out"}}var i=t&&t.bidId||r.getUniqueIdentifierStr(),o=e||0;this.bidderCode="",this.width=0,this.height=0,this.statusMessage=n(),this.adId=i,this.getStatusCode=function(){return o},this.getSize=function(){return this.width+"x"+this.height}}var r=n(2);t.createBid=function(){return new(Function.prototype.bind.apply(i,[null].concat(Array.prototype.slice.call(arguments))))}},function(e,t,n){"use strict";function i(){return(new Date).getTime()}function r(e){return e.bidderCode}function o(e){return e.bidder}function a(e){var t=this,n=pbjs._bidsRequested.map(function(n){return n.bids.filter(w.adUnitsFilter.bind(t,pbjs._adUnitCodes)).filter(function(t){return t.placementCode===e})}).reduce(w.flatten).map(function(e){return"indexExchange"===e.bidder?e.sizes.length:1}).reduce(s,0),i=pbjs._bidsReceived.filter(function(t){return t.adUnitCode===e}).length;return n===i}function s(e,t){return e+t}function d(){var e=pbjs._bidsRequested.map(function(e){return e.bids}).reduce(w.flatten).filter(w.adUnitsFilter.bind(this,pbjs._adUnitCodes)).map(function(e){return"indexExchange"===e.bidder?e.sizes.length:1}).reduce(function(e,t){return e+t},0),t=pbjs._bidsReceived.filter(w.adUnitsFilter.bind(this,pbjs._adUnitCodes)).length;return e===t}function c(e,t){return pbjs._bidsRequested.find(function(n){return n.bids.filter(function(n){return n.bidder===e&&n.placementCode===t}).length>0})||{start:null,requestId:null}}function l(e,t){var n={},i=pbjs.bidderSettings;if(t&&i){var r=m();u(n,r,t)}return e&&t&&i&&i[e]&&i[e][_.JSON_MAPPING.ADSERVER_TARGETING]?(u(n,i[e],t),t.alwaysUseBid=i[e].alwaysUseBid,t.sendStandardTargeting=i[e].sendStandardTargeting):C[e]&&(u(n,C[e],t),t.alwaysUseBid=C[e].alwaysUseBid,t.sendStandardTargeting=C[e].sendStandardTargeting),n}function u(e,t,n){var i=t[_.JSON_MAPPING.ADSERVER_TARGETING];return n.size=n.getSize(),S._each(i,function(i){var r=i.key,o=i.val;if(e[r]&&S.logWarn("The key: "+r+" is getting ovewritten"),S.isFn(o))try{o=o(n)}catch(a){S.logError("bidmanager","ERROR",a)}"undefined"==typeof t.suppressEmptyKeys||t.suppressEmptyKeys!==!0||!S.isEmptyStr(o)&&null!==o&&void 0!==o?e[r]=o:S.logInfo("suppressing empty key '"+r+"' from adserver targeting")}),e}function f(e){var t=[e];p(A.byAdUnit,t)}function p(e,t){var n=this;S.isArray(e)&&e.forEach(function(e){var i=t||pbjs._adUnitCodes,r=[pbjs._bidsReceived.filter(w.adUnitsFilter.bind(n,i)).reduce(h,{})];e.apply(pbjs,r)})}function h(e,t,n,i){return t.adUnitCode in Object.keys(e)?e:(e[t.adUnitCode]={bids:i.filter(function(e){return e.adUnitCode===t.adUnitCode})},e)}function g(e){var t=e.bidderCode,n=e.cpm;if(t&&pbjs.bidderSettings&&pbjs.bidderSettings[t]&&y(pbjs.bidderSettings[t].bidCpmAdjustment)===T)try{n=pbjs.bidderSettings[t].bidCpmAdjustment.call(null,e.cpm,S.extend({},e))}catch(i){S.logError("Error during bid adjustment","bidmanager.js",i)}n>=0&&(e.cpm=n)}function m(){var e=pbjs.bidderSettings;return e[_.JSON_MAPPING.BD_SETTING_STANDARD]||(e[_.JSON_MAPPING.BD_SETTING_STANDARD]={adserverTargeting:[{key:"hb_bidder",val:function(e){return e.bidderCode}},{key:"hb_adid",val:function(e){return e.adId}},{key:"hb_pb",val:function(e){return k===_.GRANULARITY_OPTIONS.AUTO?e.pbAg:k===_.GRANULARITY_OPTIONS.DENSE?e.pbDg:k===_.GRANULARITY_OPTIONS.LOW?e.pbLg:k===_.GRANULARITY_OPTIONS.MEDIUM?e.pbMg:k===_.GRANULARITY_OPTIONS.HIGH?e.pbHg:k===_.GRANULARITY_OPTIONS.CUSTOM?e.pbCg:void 0}},{key:"hb_size",val:function(e){return e.size}}]}),e[_.JSON_MAPPING.BD_SETTING_STANDARD]}function v(){return m()[_.JSON_MAPPING.ADSERVER_TARGETING]}var y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},w=n(2),x=n(13),_=n(3),S=n(2),I=n(8),T="function",A={byAdUnit:[],all:[],oneTime:null,timer:!1},k=_.GRANULARITY_OPTIONS.MEDIUM,E=void 0,C={};t.setCustomPriceBucket=function(e){E=e},t.getTimedOutBidders=function(){return pbjs._bidsRequested.map(r).filter(w.uniques).filter(function(e){return pbjs._bidsReceived.map(o).filter(w.uniques).indexOf(e)<0})},t.bidsBackAll=function(){return d()},t.addBidResponse=function(e,n){if(n){var r=c(n.bidderCode,e),o=r.requestId,s=r.start;if(b(n,{requestId:o,responseTimestamp:i(),requestTimestamp:s,cpm:n.cpm||0,bidder:n.bidderCode,adUnitCode:e}),n.timeToRespond=n.responseTimestamp-n.requestTimestamp,n.timeToRespond>pbjs.cbTimeout+pbjs.timeoutBuffer){var u=!0;t.executeCallback(u)}I.emit(_.EVENTS.BID_ADJUSTMENT,n),I.emit(_.EVENTS.BID_RESPONSE,n);var p=x.getPriceBucketString(n.cpm,E);n.pbLg=p.low,n.pbMg=p.med,n.pbHg=p.high,n.pbAg=p.auto,n.pbDg=p.dense,n.pbCg=p.custom;var h={};n.bidderCode&&0!==n.cpm&&(h=l(n.bidderCode,n),n.dealId&&(h["hb_deal_"+n.bidderCode]=n.dealId),n.adserverTargeting=h),pbjs._bidsReceived.push(n)}n&&n.adUnitCode&&a(n.adUnitCode)&&f(n.adUnitCode),d()&&t.executeCallback()},t.getKeyValueTargetingPairs=function(){return l.apply(void 0,arguments)},t.setPriceGranularity=function(e){var t=_.GRANULARITY_OPTIONS;Object.keys(t).filter(function(n){return e===t[n]})?k=e:(S.logWarn("Prebid Warning: setPriceGranularity was called with invalid setting, using `medium` as default."),k=_.GRANULARITY_OPTIONS.MEDIUM)},t.registerDefaultBidderSetting=function(e,t){C[e]=t},t.executeCallback=function(e){if(!e&&A.timer&&clearTimeout(A.timer),A.all.called!==!0&&(p(A.all),A.all.called=!0,e)){var n=t.getTimedOutBidders();n.length&&I.emit(_.EVENTS.BID_TIMEOUT,n)}if(A.oneTime)try{p([A.oneTime])}finally{A.oneTime=null,A.timer=!1,pbjs.clearAuction()}},t.externalCallbackReset=function(){A.all.called=!1},t.addOneTimeCallback=function(e,t){A.oneTime=e,A.timer=t},t.addCallback=function(e,t,n){t.id=e,_.CB.TYPE.ALL_BIDS_BACK===n?A.all.push(t):_.CB.TYPE.AD_UNIT_BIDS_BACK===n&&A.byAdUnit.push(t)},I.on(_.EVENTS.BID_ADJUSTMENT,function(e){g(e)}),t.adjustBids=function(){return g.apply(void 0,arguments)},t.getStandardBidderAdServerTargeting=v},function(e,t){"use strict";function n(e,t){var n=0;return n=parseFloat(e),isNaN(n)&&(n=""),{low:""===n?"":i(e,s),med:""===n?"":i(e,d),high:""===n?"":i(e,c),auto:""===n?"":i(e,u),dense:""===n?"":i(e,l),custom:""===n?"":i(e,t)}}function i(e,t){var n="";if(!r(t))return n;var i=t.buckets.reduce(function(e,t){return e.max>t.max?e:t},{max:0}),s=t.buckets.find(function(t){if(e>i.max){var r=t.precision||a;n=t.max.toFixed(r)}else if(e<=t.max&&e>=t.min)return t});return s&&(n=o(e,s.increment,s.precision)),n}function r(e){if(!e||!e.buckets||!Array.isArray(e.buckets))return!1;var t=!0;return e.buckets.forEach(function(e){"undefined"!=typeof e.min&&e.max&&e.increment||(t=!1)}),t}function o(e,t,n){n||(n=a);var i=1/t;return(Math.floor(e*i)/i).toFixed(n)}Object.defineProperty(t,"__esModule",{value:!0});var a=2,s={buckets:[{min:0,max:5,increment:.5}]},d={buckets:[{min:0,max:20,increment:.1}]},c={buckets:[{min:0,max:20,increment:.01}]},l={buckets:[{min:0,max:3,increment:.01},{min:3,max:8,increment:.05},{min:8,max:20,increment:.5}]},u={buckets:[{min:0,max:5,increment:.05},{min:5,max:10,increment:.1},{min:10,max:20,increment:.5}]};t.getPriceBucketString=n,t.isValidePriceConfig=r},function(e,t,n){"use strict";function i(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};try{!function(){var d=void 0,c=!1,l=i.method||(n?"POST":"GET");if(window.XMLHttpRequest?(d=new window.XMLHttpRequest,void 0===d.responseType&&(c=!0)):c=!0,c?(d=new window.XDomainRequest,d.onload=function(){t(d.responseText,d)},d.onerror=function(){a.logMessage("xhr onerror")},d.ontimeout=function(){a.logMessage("xhr timeout")},d.onprogress=function(){a.logMessage("xhr onprogress")}):d.onreadystatechange=function(){d.readyState===s&&t&&t(d.responseText,d)},"GET"===l&&n){var u=o.parse(e);r(u.search,n),e=o.format(u)}d.open(l,e),c||(i.withCredentials&&(d.withCredentials=!0),i.preflight&&d.setRequestHeader("X-Requested-With","XMLHttpRequest"),d.setRequestHeader("Content-Type",i.contentType||"text/plain")),d.send("POST"===l&&n)}()}catch(d){a.logError("xhr construction",d)}}Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};t.ajax=i;var o=n(15),a=n(2),s=4},function(e,t){"use strict";function n(e){return e?e.replace(/^\?/,"").split("&").reduce(function(e,t){var n=t.split("="),i=a(n,2),r=i[0],o=i[1];return/\[\]$/.test(r)?(r=r.replace("[]",""),e[r]=e[r]||[],e[r].push(o)):e[r]=o||"",e},{}):{}}function i(e){return Object.keys(e).map(function(t){return Array.isArray(e[t])?e[t].map(function(e){return t+"[]="+e}).join("&"):t+"="+e[t]}).join("&")}function r(e){var t=document.createElement("a");return t.href=decodeURIComponent(e),{protocol:(t.protocol||"").replace(/:$/,""),hostname:t.hostname,port:+t.port,pathname:t.pathname,search:n(t.search||""),hash:(t.hash||"").replace(/^#/,""),host:t.host}}function o(e){return(e.protocol||"http")+"://"+(e.host||e.hostname+(e.port?":"+e.port:""))+(e.pathname||"")+(e.search?"?"+i(e.search||""):"")+(e.hash?"#"+e.hash:"")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(d){r=!0,o=d}finally{try{!i&&s["return"]&&s["return"]()}finally{if(r)throw o}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.parseQS=n,t.formatQS=i,t.parse=r,t.format=o},function(e,t,n){"use strict";function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var r=i(["","://","/pubapi/3.0/","/","/","/","/ADTECH;v=2;cmd=bid;cors=yes;alias=","",";misc=",""],["","://","/pubapi/3.0/","/","/","/","/ADTECH;v=2;cmd=bid;cors=yes;alias=","",";misc=",""]),o=n(2),a=n(14).ajax,s=n(11),d=n(12),c=function(){function e(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;t>i;i++)n[i-1]=arguments[i];return function(){for(var t=arguments.length,i=Array(t),r=0;t>r;r++)i[r]=arguments[r];var o=i[i.length-1]||{},a=[e[0]];return n.forEach(function(t,n){var r=Number.isInteger(t)?i[t]:o[t];a.push(r,e[n+1])}),a.join("")}}function t(e){var t=e.params,n=t.server,i=t.region||"us",r=void 0;return p.hasOwnProperty(i)||(o.logWarn("Unknown region '"+i+"' for AOL bidder."),i="us"),r=n?n:p[i],t.region=i,u({protocol:"https:"===document.location.protocol?"https":"http",host:r,network:t.network,placement:parseInt(t.placement),pageid:t.pageId||0,sizeid:t.sizeId||0,alias:t.alias||o.getUniqueIdentifierStr(),bidfloor:"undefined"!=typeof t.bidFloor?";bidfloor="+t.bidFloor.toString():"",misc:(new Date).getTime()})}function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=s.createBid(2,e);n.bidderCode=f,n.reason=t.nbr,n.raw=t,d.addBidResponse(e.placementCode,n)}function i(e,t){var i=void 0;try{i=t.seatbid[0].bid[0]}catch(r){return void n(e,t)}var a=void 0;if(i.ext&&i.ext.encp)a=i.ext.encp;else if(a=i.price,null===a||isNaN(a))return o.logError("Invalid price in bid response",f,e),void n(e,t);var c=i.adm;t.ext&&t.ext.pixels&&(c+=t.ext.pixels);var l=s.createBid(1,e);l.bidderCode=f,l.ad=c,l.cpm=a,l.width=i.w,l.height=i.h,l.creativeId=i.crid,l.pubapiId=t.id,l.currencyCode=t.cur,i.dealid&&(l.dealId=i.dealid),d.addBidResponse(e.placementCode,l)}function c(e){o._each(e.bids,function(e){var r=t(e);a(r,function(t){if(l&&pbjs.bidderSettings&&pbjs.bidderSettings.aol&&"function"==typeof pbjs.bidderSettings.aol.bidCpmAdjustment&&o.logWarn("bidCpmAdjustment is active for the AOL adapter. As of Prebid 0.14, AOL can bid in net – please contact your accounts team to enable."),l=!1,!t&&t.length<=0)return o.logError("Empty bid response",f,e),void n(e,t);try{t=JSON.parse(t)}catch(r){return o.logError("Invalid JSON in bid response",f,e),void n(e,t)}i(e,t)},null,{withCredentials:!0})})}var l=!0,u=e(r,"protocol","host","network","placement","pageid","sizeid","alias","bidfloor","misc"),f="aol",p={us:"adserver-us.adtech.advertising.com",eu:"adserver-eu.adtech.advertising.com",as:"adserver-as.adtech.advertising.com"};return{callBids:c}};e.exports=c},function(e,t,n){"use strict";var i,r=n(2),o=n(3),a=n(2),s=n(18),d=n(12),c=n(11),l=n(10);i=function u(){function e(e,t){var n=a.getBidIdParameter("placementId",e.params),i=a.getBidIdParameter("memberId",e.params),r=a.getBidIdParameter("member",e.params),o=a.getBidIdParameter("invCode",e.params),s=a.getBidIdParameter("query",e.params),d=a.getBidIdParameter("referrer",e.params),c=a.getBidIdParameter("alt_referrer",e.params),l="http"+("https:"===document.location.protocol?"s://secure.adnxs.com/jpt?":"://ib.adnxs.com/jpt?");l=a.tryAppendQueryString(l,"callback","pbjs.handleAnCB"),l=a.tryAppendQueryString(l,"callback_uid",t),l=a.tryAppendQueryString(l,"psa","0"),l=a.tryAppendQueryString(l,"id",n),r?l=a.tryAppendQueryString(l,"member",r):i&&(l=a.tryAppendQueryString(l,"member",i),a.logMessage('appnexus.callBids: "memberId" will be deprecated soon. Please use "member" instead')),l=a.tryAppendQueryString(l,"code",o);var u="",f=a.parseSizesInput(e.sizes),p=f.length;if(p>0&&(u="size="+f[0],p>1)){u+="&promo_sizes=";for(var h=1;p>h;h++)u+=f[h]+=",";u&&","===u.charAt(u.length-1)&&(u=u.slice(0,u.length-1))}u&&(l+=u+"&");var g=a.parseQueryStringParameters(s);g&&(l+=g);var m=a.extend({},e.params);delete m.placementId,delete m.memberId,delete m.invCode,delete m.query,delete m.referrer,delete m.alt_referrer,delete m.member;var v=a.parseQueryStringParameters(m);return v&&(l+=v),""===d&&(d=a.getTopWindowUrl()),l=a.tryAppendQueryString(l,"referrer",d),l=a.tryAppendQueryString(l,"alt_referrer",c),l.lastIndexOf("&")===l.length-1&&(l=l.substring(0,l.length-1)),a.logMessage("jpt request built: "+l),e.startTime=(new Date).getTime(),l}var t=l.createNew("appnexus"),n=!1;return t.callBids=function(t){for(var n=t.bids,i=0;i<n.length;i++){var r=n[i],o=r.bidId;s.loadScript(e(r,o))}},pbjs.handleAnCB=function(e){var t;if(e&&e.callback_uid){var i,s=e.callback_uid,l="",u=r.getBidRequest(s);u&&(t=u.bidder,l=u.placementCode,u.status=o.STATUS.GOOD),a.logMessage("JSONP callback function called for ad ID: "+s);var f=[];if(e.result&&e.result.cpm&&0!==e.result.cpm){i=parseInt(e.result.cpm,10),i/=1e4;var p=e.result.creative_id;f=c.createBid(1,u),f.creative_id=p,f.bidderCode=t,f.cpm=i,f.adUrl=e.result.ad,f.width=e.result.width,f.height=e.result.height,f.dealId=e.result.deal_id,d.addBidResponse(l,f)}else a.logMessage("No prebid response from AppNexus for placement code "+l),f=c.createBid(2,u),f.bidderCode=t,d.addBidResponse(l,f);if(!n){var h=a.createInvisibleIframe();h.src="//acdn.adnxs.com/ib/static/usersync/v3/async_usersync.html";try{document.body.appendChild(h)}catch(g){a.logError(g)}n=!0}}else a.logMessage("No prebid response for placement %%PLACEMENT%%")},{callBids:t.callBids,setBidderCode:t.setBidderCode,createNew:u.createNew,buildJPTCall:e}},i.createNew=function(){return new i},e.exports=i},function(e,t,n){"use strict";function i(e,t){var n=document.createElement("script");n.type="text/javascript",n.async=!0,t&&"function"==typeof t&&(n.readyState?n.onreadystatechange=function(){("loaded"===n.readyState||"complete"===n.readyState)&&(n.onreadystatechange=null,t())}:n.onload=function(){t()}),n.src=e;var i=document.getElementsByTagName("head");i=i.length?i:document.getElementsByTagName("body"),i.length&&(i=i[0],i.insertBefore(n,i.firstChild))}var r=n(2),o={};t.loadScript=function(e,t,n){return e?void(n?o[e]?t&&"function"==typeof t&&(o[e].loaded?t():o[e].callbacks.push(t)):(o[e]={loaded:!1,callbacks:[]},t&&"function"==typeof t&&o[e].callbacks.push(t),i(e,function(){o[e].loaded=!0;try{for(var t=0;t<o[e].callbacks.length;t++)o[e].callbacks[t]()}catch(n){r.logError("Error executing callback","adloader.js:loadScript",n)}})):i(e,t)):void r.logError("Error attempting to request empty URL","adloader.js:loadScript")},t.trackPixel=function(e){var t=void 0,n=void 0;return e&&"string"==typeof e?(t=e.indexOf("?")>0?"&":"?",n=e+t+"rnd="+Math.floor(1e7*Math.random()),(new Image).src=n,n):void r.logMessage("Missing or invalid pixelUrl.")}},function(){"use strict";Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function e(t){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var e,n=Object(this),i=n.length>>>0,r=arguments[1],o=0;i>o;o++)if(e=n[o],t.call(r,e,o,n))return e}}),Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(e){var t=Object(this),n=parseInt(t.length,10)||0;if(0===n)return!1;var i,r=parseInt(arguments[1],10)||0;r>=0?i=r:(i=n+r,0>i&&(i=0));for(var o;n>i;){if(o=t[i],e===o||e!==e&&o!==o)return!0;i++}return!1}}),Number.isInteger=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}},function(e,t,n){"use strict";var i=n(15),r=function(e){this.name=e.adserver,this.code=e.code,this.getWinningBidByCode=function(){var e=this,t=pbjs._bidsReceived.find(function(t){return t.adUnitCode===e.code});return t}};t.dfpAdserver=function(e,t){var n=new r(e);n.urlComponents=t;var o={env:"vp",gdfp_req:"1",impl:"s",unviewed_position_start:"1"},a=["output","iu","sz","url","correlator","description_url","hl"],s=function(e){return encodeURIComponent(i.formatQS(e))};return n.appendQueryParams=function(){var e=n.getWinningBidByCode();this.urlComponents.search.description_url=encodeURIComponent(e.vastUrl),this.urlComponents.search.cust_params=s(e.adserverTargeting),this.urlComponents.correlator=Date.now()},n.verifyAdserverTag=function(){for(var e in o)if(!this.urlComponents.search.hasOwnProperty(e)||this.urlComponents.search[e]!==o[e])return!1;for(var t in a)if(!this.urlComponents.search.hasOwnProperty(a[t]))return!1;return!0},n}}]),e.exports=window.pbjs}).call(window)},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function i(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||i(e)||!!e._isBuffer)}},function(e,t,n){var i,r,o;/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
!function(a){r=[n(0)],i=a,o="function"==typeof i?i.apply(t,r):i,!(void 0!==o&&(e.exports=o))}(function(e){function t(e){return s.raw?e:encodeURIComponent(e)}function n(e){return s.raw?e:decodeURIComponent(e)}function i(e){return t(s.json?JSON.stringify(e):String(e))}function r(e){0===e.indexOf('"')&&(e=e.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return e=decodeURIComponent(e.replace(a," ")),s.json?JSON.parse(e):e}catch(t){}}function o(t,n){var i=s.raw?t:r(t);return e.isFunction(n)?n(i):i}var a=/\+/g,s=e.cookie=function(r,a,d){if(void 0!==a&&!e.isFunction(a)){if(d=e.extend({},s.defaults,d),"number"==typeof d.expires){var c=d.expires,l=d.expires=new Date;l.setTime(+l+864e5*c)}return document.cookie=[t(r),"=",i(a),d.expires?"; expires="+d.expires.toUTCString():"",d.path?"; path="+d.path:"",d.domain?"; domain="+d.domain:"",d.secure?"; secure":""].join("")}for(var u=r?void 0:{},f=document.cookie?document.cookie.split("; "):[],p=0,h=f.length;p<h;p++){var g=f[p].split("="),m=n(g.shift()),v=g.join("=");if(r&&r===m){u=o(v,a);break}r||void 0===(v=o(v))||(u[m]=v)}return u};s.defaults={},e.removeCookie=function(t,n){return void 0!==e.cookie(t)&&(e.cookie(t,"",e.extend({},n,{expires:-1})),!e.cookie(t))}})},function(e,t,n){!function(){var t=n(149),i=n(39).utf8,r=n(153),o=n(39).bin,a=function(e,n){e.constructor==String?e=n&&"binary"===n.encoding?o.stringToBytes(e):i.stringToBytes(e):r(e)?e=Array.prototype.slice.call(e,0):Array.isArray(e)||(e=e.toString());for(var s=t.bytesToWords(e),d=8*e.length,c=1732584193,l=-271733879,u=-1732584194,f=271733878,p=0;p<s.length;p++)s[p]=16711935&(s[p]<<8|s[p]>>>24)|4278255360&(s[p]<<24|s[p]>>>8);s[d>>>5]|=128<<d%32,s[(d+64>>>9<<4)+14]=d;for(var h=a._ff,g=a._gg,m=a._hh,v=a._ii,p=0;p<s.length;p+=16){var y=c,b=l,w=u,x=f;c=h(c,l,u,f,s[p+0],7,-680876936),f=h(f,c,l,u,s[p+1],12,-389564586),u=h(u,f,c,l,s[p+2],17,606105819),l=h(l,u,f,c,s[p+3],22,-1044525330),c=h(c,l,u,f,s[p+4],7,-176418897),f=h(f,c,l,u,s[p+5],12,1200080426),u=h(u,f,c,l,s[p+6],17,-1473231341),l=h(l,u,f,c,s[p+7],22,-45705983),c=h(c,l,u,f,s[p+8],7,1770035416),f=h(f,c,l,u,s[p+9],12,-1958414417),u=h(u,f,c,l,s[p+10],17,-42063),l=h(l,u,f,c,s[p+11],22,-1990404162),c=h(c,l,u,f,s[p+12],7,1804603682),f=h(f,c,l,u,s[p+13],12,-40341101),u=h(u,f,c,l,s[p+14],17,-1502002290),l=h(l,u,f,c,s[p+15],22,1236535329),c=g(c,l,u,f,s[p+1],5,-165796510),f=g(f,c,l,u,s[p+6],9,-1069501632),u=g(u,f,c,l,s[p+11],14,643717713),l=g(l,u,f,c,s[p+0],20,-373897302),c=g(c,l,u,f,s[p+5],5,-701558691),f=g(f,c,l,u,s[p+10],9,38016083),u=g(u,f,c,l,s[p+15],14,-660478335),l=g(l,u,f,c,s[p+4],20,-405537848),c=g(c,l,u,f,s[p+9],5,568446438),f=g(f,c,l,u,s[p+14],9,-1019803690),u=g(u,f,c,l,s[p+3],14,-187363961),l=g(l,u,f,c,s[p+8],20,1163531501),c=g(c,l,u,f,s[p+13],5,-1444681467),f=g(f,c,l,u,s[p+2],9,-51403784),u=g(u,f,c,l,s[p+7],14,1735328473),l=g(l,u,f,c,s[p+12],20,-1926607734),c=m(c,l,u,f,s[p+5],4,-378558),f=m(f,c,l,u,s[p+8],11,-2022574463),u=m(u,f,c,l,s[p+11],16,1839030562),l=m(l,u,f,c,s[p+14],23,-35309556),c=m(c,l,u,f,s[p+1],4,-1530992060),f=m(f,c,l,u,s[p+4],11,1272893353),u=m(u,f,c,l,s[p+7],16,-155497632),l=m(l,u,f,c,s[p+10],23,-1094730640),c=m(c,l,u,f,s[p+13],4,681279174),f=m(f,c,l,u,s[p+0],11,-358537222),u=m(u,f,c,l,s[p+3],16,-722521979),l=m(l,u,f,c,s[p+6],23,76029189),c=m(c,l,u,f,s[p+9],4,-640364487),f=m(f,c,l,u,s[p+12],11,-421815835),u=m(u,f,c,l,s[p+15],16,530742520),l=m(l,u,f,c,s[p+2],23,-995338651),c=v(c,l,u,f,s[p+0],6,-198630844),f=v(f,c,l,u,s[p+7],10,1126891415),u=v(u,f,c,l,s[p+14],15,-1416354905),l=v(l,u,f,c,s[p+5],21,-57434055),c=v(c,l,u,f,s[p+12],6,1700485571),f=v(f,c,l,u,s[p+3],10,-1894986606),u=v(u,f,c,l,s[p+10],15,-1051523),l=v(l,u,f,c,s[p+1],21,-2054922799),c=v(c,l,u,f,s[p+8],6,1873313359),f=v(f,c,l,u,s[p+15],10,-30611744),u=v(u,f,c,l,s[p+6],15,-1560198380),l=v(l,u,f,c,s[p+13],21,1309151649),c=v(c,l,u,f,s[p+4],6,-145523070),f=v(f,c,l,u,s[p+11],10,-1120210379),u=v(u,f,c,l,s[p+2],15,718787259),l=v(l,u,f,c,s[p+9],21,-343485551),c=c+y>>>0,l=l+b>>>0,u=u+w>>>0,f=f+x>>>0}return t.endian([c,l,u,f])};a._ff=function(e,t,n,i,r,o,a){var s=e+(t&n|~t&i)+(r>>>0)+a;return(s<<o|s>>>32-o)+t},a._gg=function(e,t,n,i,r,o,a){var s=e+(t&i|n&~i)+(r>>>0)+a;return(s<<o|s>>>32-o)+t},a._hh=function(e,t,n,i,r,o,a){var s=e+(t^n^i)+(r>>>0)+a;return(s<<o|s>>>32-o)+t},a._ii=function(e,t,n,i,r,o,a){var s=e+(n^(t|~i))+(r>>>0)+a;return(s<<o|s>>>32-o)+t},a._blocksize=16,a._digestsize=16,e.exports=function(e,n){if(void 0===e||null===e)throw new Error("Illegal argument "+e);var i=t.wordsToBytes(a(e,n));return n&&n.asBytes?i:n&&n.asString?o.bytesToString(i):t.bytesToHex(i)}}()},function(e,t){/*!
Waypoints - 4.0.1
Copyright © 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
!function(){"use strict";function e(i){if(!i)throw new Error("No options passed to Waypoint constructor");if(!i.element)throw new Error("No element option passed to Waypoint constructor");if(!i.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+t,this.options=e.Adapter.extend({},e.defaults,i),this.element=this.options.element,this.adapter=new e.Adapter(this.element),this.callback=i.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=e.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=e.Context.findOrCreateByElement(this.options.context),e.offsetAliases[this.options.offset]&&(this.options.offset=e.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),n[this.key]=this,t+=1}var t=0,n={};e.prototype.queueTrigger=function(e){this.group.queueTrigger(this,e)},e.prototype.trigger=function(e){this.enabled&&this.callback&&this.callback.apply(this,e)},e.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete n[this.key]},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},e.prototype.next=function(){return this.group.next(this)},e.prototype.previous=function(){return this.group.previous(this)},e.invokeAll=function(e){var t=[];for(var i in n)t.push(n[i]);for(var r=0,o=t.length;r<o;r++)t[r][e]()},e.destroyAll=function(){e.invokeAll("destroy")},e.disableAll=function(){e.invokeAll("disable")},e.enableAll=function(){e.Context.refreshAll();for(var t in n)n[t].enabled=!0;return this},e.refreshAll=function(){e.Context.refreshAll()},e.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},e.viewportWidth=function(){return document.documentElement.clientWidth},e.adapters=[],e.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},e.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=e}(),function(){"use strict";function e(e){window.setTimeout(e,1e3/60)}function t(e){this.element=e,this.Adapter=r.Adapter,this.adapter=new this.Adapter(e),this.key="waypoint-context-"+n,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},e.waypointContextKey=this.key,i[e.waypointContextKey]=this,n+=1,r.windowContext||(r.windowContext=!0,r.windowContext=new t(window)),this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var n=0,i={},r=window.Waypoint,o=window.onload;t.prototype.add=function(e){var t=e.options.horizontal?"horizontal":"vertical";this.waypoints[t][e.key]=e,this.refresh()},t.prototype.checkEmpty=function(){var e=this.Adapter.isEmptyObject(this.waypoints.horizontal),t=this.Adapter.isEmptyObject(this.waypoints.vertical),n=this.element==this.element.window;e&&t&&!n&&(this.adapter.off(".waypoints"),delete i[this.key])},t.prototype.createThrottledResizeHandler=function(){function e(){t.handleResize(),t.didResize=!1}var t=this;this.adapter.on("resize.waypoints",function(){t.didResize||(t.didResize=!0,r.requestAnimationFrame(e))})},t.prototype.createThrottledScrollHandler=function(){function e(){t.handleScroll(),t.didScroll=!1}var t=this;this.adapter.on("scroll.waypoints",function(){t.didScroll&&!r.isTouch||(t.didScroll=!0,r.requestAnimationFrame(e))})},t.prototype.handleResize=function(){r.Context.refreshAll()},t.prototype.handleScroll=function(){var e={},t={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in t){var i=t[n],r=i.newScroll>i.oldScroll,o=r?i.forward:i.backward;for(var a in this.waypoints[n]){var s=this.waypoints[n][a];if(null!==s.triggerPoint){var d=i.oldScroll<s.triggerPoint,c=i.newScroll>=s.triggerPoint,l=d&&c,u=!d&&!c;(l||u)&&(s.queueTrigger(o),e[s.group.id]=s.group)}}}for(var f in e)e[f].flushTriggers();this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}},t.prototype.innerHeight=function(){return this.element==this.element.window?r.viewportHeight():this.adapter.innerHeight()},t.prototype.remove=function(e){delete this.waypoints[e.axis][e.key],this.checkEmpty()},t.prototype.innerWidth=function(){return this.element==this.element.window?r.viewportWidth():this.adapter.innerWidth()},t.prototype.destroy=function(){var e=[];for(var t in this.waypoints)for(var n in this.waypoints[t])e.push(this.waypoints[t][n]);for(var i=0,r=e.length;i<r;i++)e[i].destroy()},t.prototype.refresh=function(){var e,t=this.element==this.element.window,n=t?void 0:this.adapter.offset(),i={};this.handleScroll(),e={horizontal:{contextOffset:t?0:n.left,contextScroll:t?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:t?0:n.top,contextScroll:t?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var o in e){var a=e[o];for(var s in this.waypoints[o]){var d,c,l,u,f,p=this.waypoints[o][s],h=p.options.offset,g=p.triggerPoint,m=0,v=null==g;p.element!==p.element.window&&(m=p.adapter.offset()[a.offsetProp]),"function"==typeof h?h=h.apply(p):"string"==typeof h&&(h=parseFloat(h),p.options.offset.indexOf("%")>-1&&(h=Math.ceil(a.contextDimension*h/100))),d=a.contextScroll-a.contextOffset,p.triggerPoint=Math.floor(m+d-h),c=g<a.oldScroll,l=p.triggerPoint>=a.oldScroll,u=c&&l,f=!c&&!l,!v&&u?(p.queueTrigger(a.backward),i[p.group.id]=p.group):!v&&f?(p.queueTrigger(a.forward),i[p.group.id]=p.group):v&&a.oldScroll>=p.triggerPoint&&(p.queueTrigger(a.forward),i[p.group.id]=p.group)}}return r.requestAnimationFrame(function(){for(var e in i)i[e].flushTriggers()}),this},t.findOrCreateByElement=function(e){return t.findByElement(e)||new t(e)},t.refreshAll=function(){for(var e in i)i[e].refresh()},t.findByElement=function(e){return i[e.waypointContextKey]},window.onload=function(){o&&o(),t.refreshAll()},r.requestAnimationFrame=function(t){var n=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||e;n.call(window,t)},r.Context=t}(),function(){"use strict";function e(e,t){return e.triggerPoint-t.triggerPoint}function t(e,t){return t.triggerPoint-e.triggerPoint}function n(e){this.name=e.name,this.axis=e.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),i[this.axis][this.name]=this}var i={vertical:{},horizontal:{}},r=window.Waypoint;n.prototype.add=function(e){this.waypoints.push(e)},n.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},n.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var i=this.triggerQueues[n],r="up"===n||"left"===n;i.sort(r?t:e);for(var o=0,a=i.length;o<a;o+=1){var s=i[o];(s.options.continuous||o===i.length-1)&&s.trigger([n])}}this.clearTriggerQueues()},n.prototype.next=function(t){this.waypoints.sort(e);var n=r.Adapter.inArray(t,this.waypoints),i=n===this.waypoints.length-1;return i?null:this.waypoints[n+1]},n.prototype.previous=function(t){this.waypoints.sort(e);var n=r.Adapter.inArray(t,this.waypoints);return n?this.waypoints[n-1]:null},n.prototype.queueTrigger=function(e,t){this.triggerQueues[t].push(e)},n.prototype.remove=function(e){var t=r.Adapter.inArray(e,this.waypoints);t>-1&&this.waypoints.splice(t,1)},n.prototype.first=function(){return this.waypoints[0]},n.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},n.findOrCreate=function(e){return i[e.axis][e.name]||new n(e)},r.Group=n}(),function(){"use strict";function e(e){return e===e.window}function t(t){return e(t)?t:t.defaultView}function n(e){this.element=e,this.handlers={}}var i=window.Waypoint;n.prototype.innerHeight=function(){var t=e(this.element);return t?this.element.innerHeight:this.element.clientHeight},n.prototype.innerWidth=function(){var t=e(this.element);return t?this.element.innerWidth:this.element.clientWidth},n.prototype.off=function(e,t){function n(e,t,n){for(var i=0,r=t.length-1;i<r;i++){var o=t[i];n&&n!==o||e.removeEventListener(o)}}var i=e.split("."),r=i[0],o=i[1],a=this.element;if(o&&this.handlers[o]&&r)n(a,this.handlers[o][r],t),this.handlers[o][r]=[];else if(r)for(var s in this.handlers)n(a,this.handlers[s][r]||[],t),this.handlers[s][r]=[];else if(o&&this.handlers[o]){for(var d in this.handlers[o])n(a,this.handlers[o][d],t);this.handlers[o]={}}},n.prototype.offset=function(){if(!this.element.ownerDocument)return null;var e=this.element.ownerDocument.documentElement,n=t(this.element.ownerDocument),i={top:0,left:0};return this.element.getBoundingClientRect&&(i=this.element.getBoundingClientRect()),{top:i.top+n.pageYOffset-e.clientTop,left:i.left+n.pageXOffset-e.clientLeft}},n.prototype.on=function(e,t){var n=e.split("."),i=n[0],r=n[1]||"__default",o=this.handlers[r]=this.handlers[r]||{},a=o[i]=o[i]||[];a.push(t),this.element.addEventListener(i,t)},n.prototype.outerHeight=function(t){var n,i=this.innerHeight();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginTop,10),i+=parseInt(n.marginBottom,10)),i},n.prototype.outerWidth=function(t){var n,i=this.innerWidth();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginLeft,10),i+=parseInt(n.marginRight,10)),i},n.prototype.scrollLeft=function(){var e=t(this.element);return e?e.pageXOffset:this.element.scrollLeft},n.prototype.scrollTop=function(){var e=t(this.element);return e?e.pageYOffset:this.element.scrollTop},n.extend=function(){function e(e,t){if("object"==typeof e&&"object"==typeof t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}for(var t=Array.prototype.slice.call(arguments),n=1,i=t.length;n<i;n++)e(t[0],t[n]);return t[0]},n.inArray=function(e,t,n){return null==t?-1:t.indexOf(e,n)},n.isEmptyObject=function(e){for(var t in e)return!1;return!0},i.adapters.push({name:"noframework",Adapter:n}),i.Adapter=n}()},function(e,t,n){"use strict";n(64),n(66),n(65);var i=n(0),r=n(4),o=n(54),a=n(57),s=n(55),d=n(56),c=n(35),l=n(62),u=n(22),f={rubicon:n(60),aol:n(58),appnexus:n(59)},p=n(53);r.once("contentReady",function(){p.setup(function(){return i("#site-header").outerHeight()})}),n(61),u.setup({bidders:[].concat(f.rubicon).concat(f.aol).concat(f.appnexus)}),i(document).ready(function(){function e(){r.trigger("contentReady"),r.trigger("initialContentLoaded",t)}var t=i("body");c.setCategory(t.data("trackcategory")||"Unknown"),o.loadScripts(),o.loadImages(),o.loadBackgroundImages(),o.loadOnAsyncContentLoaded(),-1!==document.location.search.indexOf("partner=google_charts")&&i("#dfp-ad-o1").remove(),u.setup().then(e,e).then(function(){t.is(".article-page")&&u.stickyLeaderboard({offset:function(){return i("#site-header").outerHeight()-1},avoidCollision:".article__body, .main-media__video"})}),d(),a();var n=function(){i(window).width()<1024||i(".js-floater").each(function(){s({wrapper:this,unfloatSelector:".js-floater"})})};r.on("contentLoaded",n),"yearEndChart"===i("[data-content-type]").attr("data-content-type")&&(l.getVotes(),l.setup())})}],[157]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,